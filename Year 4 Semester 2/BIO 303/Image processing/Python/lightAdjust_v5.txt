# Abandon white reference, replace with histogram-based normalization. 
# Normalize img and record data for exportation altogether. Mar 31 2019
# para: img - processed image of the chip
#	para -- chip design parameter
#	choa - algorithm choice
#	threshold - bincount threshold for white patch
#	standard - standard white value for histBased normalization
#
# output: cpNorm - copy of "process" that is lighting normalized
#	  spotNorm - cpNorm where areas other than spots are black
#	  spotDt - an array of spot data
#

def lightAdjust(img, para, choa, threshold, standard):
	
	# Perform histogram based normalization, return peaks together
	def histBased(block, pdt, sdt, standard):
		cbk = np.copy(block)
		x, y, z = cbk.shape
		cbk = np.reshape(cbk, (x*y, z))
		cpdt = []
		csdt = []
		for ch in range(0, 3): # for R/G/B channel
			chist, intenw, intens = histogram(block, 0, ch, 0, 0, '', 1, 0, 1) # v3
			shift = standard - intenw
			cbk[:,ch] = cbk[:,ch] + shift # normalized
			cpdt.append(standard)
			csdt.append(intens + shift)
		pdt.append(np.array(cpdt))
		sdt.append(np.array(csdt))
		return np.reshape(cbk, (x,y,z)), pdt, sdt

	# wp1 (input modified)
	def whitePatch1(block, pdt, sdt):
		cbk = block.transpose(2, 0, 1)
		brightest = float(2**8)
		cpdt = []
		csdt = []
		for ch in range(0, 3): # for R/G/B channel
			cbk[ch] = np.minimum(cbk[ch] * (brightest/float(cbk[ch].max())),255)

			# extract data
			chist, intenw, intens = histogram(block, 0, ch, 0, 0, '', 1, 0, 1) # v3
			cpdt.append(intenw)
			csdt.append(intens)
		pdt.append(np.array(cpdt))
		sdt.append(np.array(csdt))
		return cbk.transpose(1, 2, 0), pdt, sdt	

	# wp2
	def whitePatch2(block, threshold, pdt, sdt):
		cbk = block.transpose(2, 0, 1)
		brightest = float(2**8)
		cpdt = []
		csdt = []
		x, y, z = cbk.shape
		th = threshold * y * z
		for ch in range(0, 3):
			h = np.bincount(cbk[ch].ravel(), minlength = 256)
			sum = 0
			max = 256
			while (sum < int(th) & max > 1):
				max = max - 1
				sum = sum + h[max]
			cbk[ch] = np.minimum(cbk[ch] * (brightest/float(max)),255)

			# extract data
			chist, intenw, intens = histogram(block, 0, ch, 0, 0, '', 1, 0, 1) # v3
			cpdt.append(intenw)
			csdt.append(intens)
		pdt.append(np.array(cpdt))
		sdt.append(np.array(csdt))
		return cbk.transpose(1, 2, 0), pdt, sdt

	# Final operation
	# rw * cl chip
	# h/v_offset - horizontal/vertical distance between left/top_most point of 
	# 	       the top-left spot and the left/top inner chip edge
	# h/v_dist - horizontal/vertical distance between two spots
	# h/v_dd - half of horizontal/vertical edge length of rectangle extracted
	# r - radius of spot
	# dr - radius for spot drawing
	rw, cl, hoffset, voffset, hdist, vdist, hdd, vdd, r, dr = para
	norm = np.copy(img)	        # do not change input img
	pdt = []        		# peak data for spot &
	sdt = []			# patch collected directly following normlizaiton

	# normalize locally (block-wise)
	for i in range(0, rw):          # block in row i
		for j in range(0, cl):  #          col j
			x = hoffset + j*hdist + (2*j+1)*r # col no.
			y = voffset + i*vdist + (2*i+1)*r # row no.
			block = norm[y-vdd: y+vdd, x-hdd: x+hdd]

			if (choa == 0): # hist_based
				nblock, pdt, sdt = histBased(block, pdt, sdt, standard)

			elif (choa == 1): # wp1
				nblock, pdt, sdt = whitePatch1(block, pdt, sdt)

			elif (choa == 2): # wp2
				nblock, pdt, sdt = whitePatch2(block, threshold, pdt, sdt) # suggested thre .1

			norm[y-vdd: y+vdd, x-hdd: x+hdd] = nblock

	return norm, np.array(pdt), np.array(sdt)
