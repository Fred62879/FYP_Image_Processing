#
# designed for version 2 benchmarking
# Images under this directory are all sotred in the way that
# those of the same light (6 chips * 2 time points)
# are placed in one folder (e.g. light1/2/3)


**** Process ****
def name(ip, op):
	error = []
	for folder in os.listdir(ip):
		curin = os.path.join(ip, folder)
		curout = os.path.join(op, folder)
		for filename in os.listdir(curin):
			inname = os.path.join(curin, filename)
			outname = os.path.join(curout, filename)
			try:
				orig, gray, chipct, chip, warp, restr = process(inname, 100, 0.1, 0)
			except:
				error.append(inname)
				cv2.imwrite(outname, np.zeros(shape = (1, 1)))
				continue
			cv2.imwrite(outname, restr)
	return error

os.chdir('wd/2018-19FYP/chip_v2/Benchmarking/20190305/version2')
b = name('20190305_lightconditions','20190305_lightconditions_n')


**** Distance ****
// stick to version 1 (v2) image arrangement


**** Normalize ****
def norm(ip, op, para, wr, thre):
	curout = []
	for folder in os.listdir(ip):
		curin = os.path.join(ip, folder)
		del curout[:]
		for i in range(0, 3):
			curout.append(os.path.join(op[i], folder))
		for filename in os.listdir(curin):
			inname = os.path.join(curin, filename)
			for i in range(0, 3):
				outname = os.path.join(curout[i], filename)
				img = cv2.imread(inname)
				if (img.shape == (1,1,3)):
					cv2.imwrite(outname, img)
					continue
				norm = lightAdjust(img, para, i, wr, .1) # v4
				cv2.imwrite(outname, norm)
# test
para = [7, 6, 20, 27, 40, 30, 35, 30, 15, 25]
op = ['20190305_lightconditions_wr','20190305_lightconditions_wp1','20190305_lightconditions_wp2']
norm('20190305_lightconditions_n', op, para, [2,1,1], .1)

wrdist = distanceAll('20190305_lightconditions_wr', 3)
wp1dist = distanceAll('20190305_lightconditions_wp1', 3)
wp2dist = distanceAll('20190305_lightconditions_wp2', 3)


**** Dissect Patch from spot ****
// write out as collect, spot patch same folder
def dissect(ip, op1, op2):
	error = []
	for folder in os.listdir(ip):
		curin = os.path.join(ip, folder)
		curout1 = os.path.join(op1, folder)
		curout2 = os.path.join(op2, folder)
		for filename in os.listdir(curin):
			inname = os.path.join(curin, filename)
			img = cv2.imread(inname)
			if img is None:
				error.append(inname)
				continue
			outname1 = os.path.join(curout1, filename)
			outname2 = os.path.join(curout2, filename)
			if (img.shape == (1,1,3)):
				cv2.imwrite(outname1, img)
				cv2.imwrite(outname2, img)
				continue
			spot, patch, mask = spotEx(img, para, 2)
			cv2.imwrite(outname1, spot)
			cv2.imwrite(outname2, patch)
	return error

e = dissect("20190305_lightconditions_n", "20190305_lightconditions_spot", "20190305_lightconditions_patch")
e = dissect("20190305_lightconditions_wr", "20190305_lightconditions_spot", "20190305_lightconditions_patch")


**** Data export ****
// Mar 16
// choice 1_RGB value exported in three files

# append current chip data (dt) to overall chip data
# for all images under same light folder (newdt)
def append(dt, newdt):
	for i in range(0, len(dt)):
		cur = dt[i]           # one block of given chip (dt)
		a, b = cur.shape
		for k in range(0, 3): # assemble channel-wise
			newcur = []   # dt for the same channel in given chip
			if (a == 0):
				newcur.append(-1)
			for j in range(0, a):
				newcur.append(cur[j][k])
			newdt[k].append(np.array(newcur))
	return newdt

# collect data from all images light-wise
def collect(ip):
	alldt = []
	for folder in os.listdir(ip):            # light1/2/3
		newdt = [[],[],[]]               # dt for each channel of all images in light_x
		curin = os.path.join(ip, folder) # .../ip/lightx
		for file in os.listdir(curin):
			img = cv2.imread(os.path.join(curin, file))
			# print(os.path.join(curin, file))
			curdt = intenExtract(img, para) # v5
			newdt = append(curdt, newdt)    # append 42 new rows to r/g/b each
		alldt.append(newdt)
	return alldt
			
# wrout given chip data
# op modified, reinitialize each wrout
def wrout(ip, op):
	alldt = collect(ip)
	for i in range(0, len(op)):
		for j in range(0, len(op[i])):
			op[i][j] = ip + op[i][j]
	for i in range(0, len(alldt)):     # light_1-3
		for j in range(0, 3):      # light_i R/G/B
			with open(op[i][j], 'w', newline = '') as f:
				writer = csv.writer(f, delimiter = ',')
				for k in range(0, len(alldt[i][j])):   # block k of light_i/channel_j
					b = writer.writerow(alldt[i][j][k])


		
// choice 2_three files in total each for one light condition
// 1st 42 row, chip1, time1; next 42, chip1, time 2...


**** Histogram ****
// generate one folder for each image to store their 42-histograms, repeat for each r/g/b
# first fill all 3 r/g/b subfolders with light1, then light2 and finally 3.
def createFolders(ip, op):
	for light in os.listdir(ip):                       # light1/2/3 for input
		curin = os.path.join(ip, light)
		for rgb in os.listdir(op):                 # r/g/b for output
			curout = os.path.join(op, rgb)
			curout = os.path.join(curout, light)
			for imgname in os.listdir(curin): # image name
				# image name being dir
				outdir = os.path.join(curout, imgname[0:len(imgname)-3])
				if not os.path.exists(outdir):
					os.makedirs(outdir)

# generate Mar 29 2019
createFolders('20190305_lightconditions_n', '20190305_lightconditions_n_hist')
createFolders('20190305_lightconditions_n', '20190305_lightconditions_wp1_hist')
createFolders('20190305_lightconditions_n', '20190305_lightconditions_wp2_hist')
createFolders('20190305_lightconditions_n', '20190305_lightconditions_wr_hist')

// calculate histogram and store, label with deteced peaks
# for each img, hist all 42 blocks and store in the same folder
def allBlocks(img, outdir, ch, ns):
	for i in range(0, rw):
		for j in range(0, cl):
			cp = getPatch(img, i, j, para)
			id = i * cl + j
			# histogram(cp, ch, ns, 1, cn, 0, 0) # v1
			# incorporate peak into histogram name
			chist, intenw, intens = histogram(cp, 0, 0, 0, 0, '', 1, 0, 1) # v3
			info = str(intens) + '_' + str(chist[intens]) + '_' + str(intenw) + '_' + str(chist[intenw])
			cn = os.path.join(outdir, str(id) + '_' + info + '.png')
			# draw and save histogram
			hist = histogram(cp, 0, ch, ns, 1, cn, 0, 1, 0)

# plot and store hist for all blocks of all imgs in ip
def hist(ip, op, ch, ns):
	for light in os.listdir(ip):
		curin = os.path.join(ip, light) # light1/2/3
		cch = 3
		for rgb in os.listdir(op):
			cch = cch - 1
			if (cch != ch): # select the correct rgb subfolder according to ch
				continue
			curout = os.path.join(op, rgb)
			curout = os.path.join(curout, light)
			for imgname in os.listdir(curin):
				inname = os.path.join(curin, imgname)
				img = cv2.imread(inname)
				if (img.shape == (1,1,3)):
					continue
				outdir = os.path.join(curout, imgname[0:len(imgname)-4])
				allBlocks(img, outdir, ch, ns)
			break

rw, cl, rst, cst, hd, vd, hdd, vdd, r, dr = para
os.chdir('wd/2018-19FYP/chip_v2/Benchmarking/20190305/version2')
hist('20190305_lightconditions_t', '20190305_lightconditions_n_hist', 0, 0)  # test original n
hist('20190305_lightconditions_t', '20190305_lightconditions_wp1_hist', 0, 0)  # test wp1 (change image in .._t)
hist('20190305_lightconditions_t', '20190305_lightconditions_wp2_hist', 2, 0)  # test wp2
hist('20190305_lightconditions_t', '20190305_lightconditions_wr_hist', 0, 0)  # test wr

// write out peak value
# for wp1&2
# calculate and detect peaks for img and append to clspot/patch (current light)
def allBlocks(img, clspot, clpatch):
	cspot = [] # RGB value for all spots in current img
	cpatch = []
	for i in range(0, rw):
		for j in range(0, cl):
			cp = getPatch(img, i, j, para)
			srgb = [] # RGB value for current spot peak
			prgb = [] 
			for ch in range(0, 3):
				chist, intenw, intens = histogram(cp, 0, ch, 0, 0, '', 1, 0, 1) # v3
				srgb.append(intens)
				prgb.append(intenw)
			cspot.append(srgb)
			cpatch.append(prgb)
	clspot.append(np.array(cspot))
	clpatch.append(np.array(cpatch))

# collect all data from imgs under ip
def peakCollect(ip):
	spot = []
	patch = []
	for light in os.listdir(ip):
		clspot = [] # spot data for all imgs under cur light
		clpatch = []
		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			img = cv2.imread(inname)
			if (img.shape == (1,1,3)):
				nil = np.array((-1, -1, -1))
				clspot.append(np.array([nil for i in range(0, 43)]))
				clpatch.append(np.array([nil for i in range(0, 43)]))
			else:
				allBlocks(img, clspot, clpatch)
		spot.append(np.array(clspot))
		patch.append(np.array(clpatch))
	return spot, patch
			
# wrout given chip data
# op modified, reinitialize each wrout
def wroutIndivid(dt, op):
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, len(dt)):           # light i
			x, y, z = dt[i].shape
			for j in range(0, x):         # img j
				for k in range(0, y): # block k
					cur = []
					for m in range(0, 3):
						cur.append(dt[i][j][k][m])
					b = writer.writerow(cur)

def wrout(s, p, ip, op):
	# s, p = peakCollect(ip)
	wroutIndivid(s, op[0])
	wroutIndivid(p, op[1])

# test refer to Mar 29







