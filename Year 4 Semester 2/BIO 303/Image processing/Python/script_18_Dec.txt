import cv2, numpy as np, os, math
from matplotlib import pyplot as plt

def show(img, fold):
	rsz = cv2.resize(img, None, fx = fold, fy = fold)
	cv2.imshow('img',rsz)


def intshow(i):
	plt.imshow(i)
	plt.show()


from matplotlib import colors as colors
def den(nbins, nbInString, a, b, labela, labelb, spotIdInString):
	h, xedge, yedge, img = plt.hist2d(a, b, bins=nbins, norm=colors.LogNorm())
	plt.xlabel(labela)
	plt.ylabel(labelb)
	plt.title('Spot' + spotIdInString)
	plt.xlim([0,255])
	plt.ylim([0,255])
	cb = plt.colorbar()
	cb.set_label('Counts in bin' + ': ' + nbInString)
	plt.show()
	return h, xedge, yedge, img

**** Dec 1 ****
// reinvestigate LAB and HSV
os.chdir('wd/2018-19FYP/chip_v1')
chipct1, gray1, orig1, chip1 = readin('nc45n.jpg', 100, 2, .1)
warp1 = nonPersTrans(chipct1, orig1, gray1, 420, .1)
chipct2, gray2, orig2, chip2 = readin('tet100n.jpg', 100, 2, .1)
warp2 = nonPersTrans(chipct2, orig2, gray2, 420, .1)

lab1 = cv2.cvtColor(warp1, cv2.COLOR_BGR2LAB)
blur1 = cv2.bilateralFilter(lab1, 9, 75, 75)
l1, a1, b1 = cv2.split(lab1)

lab2 = cv2.cvtColor(warp2, cv2.COLOR_BGR2LAB)
blur2 = cv2.bilateralFilter(lab2, 9, 75, 75)
l2, a2, b2 = cv2.split(lab2)

a = np.hstack((blur1, blur2))


// redraw spot area to fit panel
merge1, es1, mersk1 = spotEx(warp1, 1, 1, 6, 6, 0, 0, 0, 35, 22, 20)
merv = cv2.bitwise_not(mersk1)
a = cv2.cvtColor(warp1, cv2.COLOR_BGR2GRAY)

warp = np.zeros_like(warp1)
warp[:, :, 0] = cv2.inpaint(warp1[:, : ,0], merv[:, :, 0], 10, cv2.INPAINT_TELEA)
warp[:, :, 1] = cv2.inpaint(warp1[:, : ,1], merv[:, :, 1], 10, cv2.INPAINT_TELEA)
warp[:, :, 2] = cv2.inpaint(warp1[:, : ,2], merv[:, :, 2], 10, cv2.INPAINT_TELEA)

lab = cv2.cvtColor(warp, cv2.COLOR_BGR2LAB)


**** Dec 2 ****
// cover designated spot
merge2, es2, mersk2 = spotEx(warp2, 1, 1, 6, 6, 0, 0, 0, 35, 22, 30)
blue = [[0, 1], [3, 2]]	
	
	def coverSpot(warp, blue, rst, cst, cext, lr, sr):
		mask = np.zeros_like(warp)
		for i in range(0, len(blue)):
			rw = blue[i][0]
			cl = blue[i][1]
			x = rst + (2*cl + 1)*lr
			y = cst + (2*rw + 1)*lr + i * cext
			cv2.circle(mask, (x, y), sr, (255, 255, 255), -1)
		return cv2.bitwise_not(mask)

warp = np.zeros((420, 420, 3))
blue = [[1, 0], [2, 2], [5, 1], [5, 4]]
mask = coverSpot(warp, blue, 0, 0, 0, 35, 15)		

// update intenExtract
p = spotDt[0]
p = p[(p != 0).any(axis = (2))]
spot, sur = intenExtract(warp1, 1, 1, 6, 6, 0, 0, 0, 35, 15, 20)
cur = np.array(spotDt[0])


**** Dec 3 ****
// draw 2D hist for each spot
spot, sur = spotEx(warp1, 1, 1, 6, 6, 0, 0, 0, 35, 22, 20)
spotDt = inten(spot, 1, 6, 6, 0, 0, 0, 35, 15)
dt = noZero(spotDt)
a, b, c = dt[0][:,0], dt[0][:,1], dt[0][:,2]
den(10, '10', a, b, 'R', 'G', '1')


	def colSpcConv(dt, nbins, nbstr, astr, bstr, cstr, flag, noplot):
		#if (flag != 'false'):
		#	p = cv2.cvtColor(p, flag)
		#a, b, c = dt[:,0], dt[:,1], dt[:,2]
		#if (noplot == 'true'):
		#	return a, b, c
		den(nbins, nbstr, a, b, astr, bstr)
		den(nbins, nbstr, a, c, astr, cstr)
		den(nbins, nbstr, b, c, bstr, cstr)
		return a, b, c

colSpcConv(spotdt[0], 10, '10', 'R', 'G' 'B', )

// kernel density plot
from scipy.stats import gaussian_kde
def kdeplot(x, y, labelx, labely, title):
	# fit an array of size [Ndim, Nsamples]

	data = np.vstack([x, y])
	kde = gaussian_kde(data)

	# evaluate on a regular grid
	xgrid = np.linspace(0, 255, 40)
	ygrid = np.linspace(0, 255, 40)
	Xgrid, Ygrid = np.meshgrid(xgrid, ygrid)
	Z = kde.evaluate(np.vstack([Xgrid.ravel(), Ygrid.ravel()]))

	# Plot the result as an image
	plt.imshow(Z.reshape(Xgrid.shape),
        	origin='lower', aspect='auto',
	        extent=[0, 255, 0, 255],
        	cmap='Blues')
	plt.title('spot' + title)
	plt.xlabel(labelx)
	plt.ylabel(labely)
	cb = plt.colorbar()
	cb.set_label("density")
	plt.show()

kdeplot(a, b, 'R', 'G', '1')
kdeplot(b, c, 'G', 'B', '1')
kdeplot(a, c, 'R', 'B', '1')


**** Dec 4 ****
// make scatter plot
spot, sur = spotEx(warp1, 1, 1, 6, 6, 0, 0, 0, 35, 22, 20) # incorporated in the next line
spotdt, surdt = intenExtract(warp1, 1, 1, 6, 6, 0, 0, 0, 35, 15, 20)
a, b, c = spotdt[0][:,0], spotdt[0][:,1], spotdt[0][:,2]
h, xedge, yedge, img = den(10, '10', a, b, 'R', 'G', '1')

REFER TO 
lab = cv2.cvtColor(warp1, cv2.COLOR_BGR2LAB)
xd, yd = data(spotdt, 10, 1)


**** Dec 5 ****
// improve plot presentation
plt.scatter(xd, yd, marker='o', cmap=plt.get_cmap('Spectral'))
	fig, ax = plt.subplots()
	ax.scatter(xd, yd)
	for i, txt in enumerate(label):
		ax.annotate(txt, (xd[i], yd[i]))
	plt.show()

scatterSpot(warp1, 0, 10, 6, 6, 0, 0, 0, 35, 15, 20, 'R', 'G', 'B', 'NC100N')
scatterSpot(warp1, cv2.COLOR_BGR2LAB, 10, 6, 6, 0, 0, 0, 35, 15, 20, 'R', 'G', 'B', 'NC100N')


**** Dec 6 ****
lab = cv2.cvtColor(warp1, cv2.COLOR_BGR2LAB)
hsv = cv2.cvtColor(warp1, cv2.COLOR_BGR2HSV)
spot, sur = spotEx(hsv, lab, 1, 1, 6, 6, 0, 0, 0, 35, 22, 20)
spotdt, surdt = intenExtract(hsv, lab, 1, 1, 6, 6, 0, 0, 0, 35, 15, 20)
spotdt, surdt = intenExtract(hsv, warp1, 1, 1, 6, 6, 0, 0, 0, 35, 15, 20)
scatterSpot(warp1, cv2.COLOR_BGR2LAB, 10, 6, 6, 0, 0, 0, 35, 15, 20, 'L', 'A', 'B', 'NC100N')


**** Dec 8 ****
// 3D hist for RGB
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib import colors

def ThreeD(a, b, c, warped, al, bl, cl):
	pixel_colors = warped.reshape((np.shape(warped)[0]*np.shape(warped)[1], 3))
	norm = colors.Normalize(vmin=-1.,vmax=1.)
	norm.autoscale(pixel_colors)
	pixel_colors = norm(pixel_colors).tolist()
	fig = plt.figure()
	axis = fig.add_subplot(1, 1, 1, projection="3d")

	axis.scatter(a.flatten(), b.flatten(), c.flatten(), facecolors=pixel_colors, marker=".")
	axis.set_xlabel(al)
	axis.set_ylabel(bl)
	axis.set_zlabel(cl)
	plt.show()

r, g, b = cv2.split(warp1)
ThreeD(r, g, b, warp1, "R", "G", "B")
// bad attempt
// another choice
H, edges = np.histogramdd(surdt[0], bins = (10, 10, 10))


**** Dec 9 ****
// normalize function
REFER To normalize()

def mode(dt, nbins, upper, id):
	if (id != -1):
		dt = dt[id]
	H, edges = np.histogramdd(dt, bins = (nbins, nbins, nbins))
	x = 0
	y = 0
	z = 0
	max = 0
	for i in range(0, nbins):
		for j in range(0, nbins):
			for k in range(0, nbins):
				if (H[i,j,k] == 0 or H[i,j,k] < max or H[i,j,k] >= upper):
					continue
				x = i
				y = j
				z = k
				max = H[i,j,k]
	return x, y, z, max

x, y, z, max = mode(surdt, 10, math.inf)
x, y, z, max = mode(surdt, 90, math.inf)
x, y, z, max = mode(surdt, 10, max)
(a,b),(c,d),(e,f) = mode(surdt, 100, math.inf, -1)
(a,b),(c,d),(e,f) = mode(res, 10, math.inf, -1)


**** Dec 10 ****
// find value to normalize, recursively select most dense area in 3D hist
(a,b),(c,d),(e,f), max = mode(surdt, 10, math.inf, 0)
res = newDT(surdt, 0, max, a, b, c, d, e, f)
(a,b),(c,d),(e,f), max = mode(res, 10, math.inf, -1)
res = newDT(res, -1, max, a, b, c, d, e, f)

(a,b),(c,d),(e,f), max = mode(res, 10, math.inf, -1)

c1, c2, c3 = normalize(surdt, 10, 0)
c1, c2, c3 = normalize(surdt, 10, 1) // fail


**** Dec 11 ****
// debugging
(a,b),(c,d),(e,f), max = mode(surdt, 10, 1)
res = newDT(surdt, 1, max, a, b, c, d, e, f)
H, edges = np.histogramdd(res, bins = (10, 10, 10))


// histogramdd has a bug, to aoivd, check whether left edge included or right edge included
(a,b),(c,d),(e,f), max = mode(res, 10, -1)
res = newDT(res, -1, max, a, b, c, d, e, f)
(a,b),(c,d),(e,f), max = mode(res, 10, -1)


**** Dec 12 ****
// update data collecting method
REFER TO normalize()

// original method stored here:
# check whether a is beyond 
	# i = 0: [lo,hi]
	# i = 1: (lo,hi]
	# i = 2: [lo,hi)
	# others: (lo,hi) if is throw away
	def beyond(a, lo, hi, i):
		if (i == 0):
			return (a < lo or a > hi)
		else if (i == 1):
			return (a <= lo or a > hi)
		else if (i == 2):
			return (a < lo or a >= hi)
		else:
			return (a <= lo or a >= hi)

	#
	#
	def numberCheck(max, ):
		

	# create new dt useing only pixels from the most dense area
	# para: dt - numpy array of data
	#	id - != -1 only when used on original dt, where 1 of the spots/surs are selected
	#	sz - expected number of pixels included in new dt
	#	a/c/e - lower bound for R/G/B values
	#	b/d/f - upper...
	#
	# output: res - new array contain only values of pixels for the most dense area
	#
	def newDT(dt, id, sz, a, b, c, d, e, f):
		res = np.zeros(shape = (int(sz), 3))
		st = 0
		if (id != -1):
			dt = dt[id]
		for i in range(0, len(dt)):
			if (beyond(dt[i][0], a, b) or beyond(dt[i][1], c, d) or beyond(dt[i][2], e, f)):
				continue
			res[st] = dt[i]
			st += 1
		return res

// test
c1, c2, c3 = normalize(surdt, 10, 2) // gives all 180
x, y, z, max = mode(surdt, 10, math.inf, 2)
H, edges = np.histogramdd(surdt[2], bins = (10, 10, 10))

>>> edges[0]
array([107. , 121.8, 136.6, 151.4, 166.2, 181. , 195.8, 210.6, 225.4,
       240.2, 255. ])
>>> edges[1]
array([107. , 121.8, 136.6, 151.4, 166.2, 181. , 195.8, 210.6, 225.4,
       240.2, 255. ])
>>> edges[2]
array([107. , 121.8, 136.6, 151.4, 166.2, 181. , 195.8, 210.6, 225.4,
       240.2, 255. ])

// check this manually
	def t(dt, i):
		smal = -math.inf
		for j in range(0, len(dt)):
			if (dt[j][i] > smal):
				smal = dt[j][i]
		return smal

t(surdt[2], 0) //surdt[2] do have smallest being 107, largest being 255 for both RGB channels

// normalize graph
REFER TO normalize	

norm = np.zeros_like(warp1)
norm = panelConstruct(surdt, norm, 10, 6, 6, 0, 0, 0, 35, 15)
norm2 = enhanceGraph(warp1, spotdt, surdt, 10, 6, 6, 0, 0, 0, 35, 15)


**** Dec 17 ****
// work on 2nd version module
os.chdir('wd/2018-19FYP/chip_v2/20181119')
chipct1, gray1, orig1, chip1 = readin('20181119_AMP1_9_30min.jpg', 100, 1, .1)
warp1 = persTransU(chipct1, orig1, gray1, 0.2, chip1)


**** Dec 22 ****
// adapt mask generation to version 2 module
mask = np.zeros_like(warp1)
mask = maskD(mask, 1, 1, 7, 6, 20, 27, 40, 30, 15)

hsv = cv2.cvtColor(warp1, cv2.COLOR_BGR2HSV)
spot, sur = spotEx(hsv, warp1, 1, 1, 7, 6, 20, 27, 40, 30, 15, 20)


**** Dec 23 ****
// color top-right corner of warp as completely black
a = cv2.bitwise_not(warp1)
ret, thresh = cv2.threshold(a, 220, 255, 0)
restr_inv = cv2.add(thresh, a)
restr = cv2.bitwise_not(restr_inv)

// update intenExtract
hsv = cv2.cvtColor(restr, cv2.COLOR_BGR2HSV)
spot, sur = spotEx(hsv, restr, 1, 1, 7, 6, 20, 27, 40, 30, 15, 20, 20)

spotDt = inten(spot, 1, 7, 6, 20, 27, 40, 30, 15, 35, 30)
spotdt, surdt = intenExtract(hsv, warp1, 1, 1, 7, 6, 20, 27, 40, 30, 35, 30, 15, 20, 20)



**** Dec 24 ****
// update normalize
norm = np.zeros_like(warp1)
norm = panelConstruct(surdt, norm, 10, 7, 6, 20, 27, 40, 30, 35, 30, 15)
					    rw cl rst cst  hd  vd hdd vdd   r  dr
enh = enhanceGraph(warp1, spotdt, surdt, 10, 7, 6, 20, 27, 40, 30, 35, 30, 15, 20)

// improve image processing
// enhance fresh image before any processing

// adapt image (3D) to data (2D)
imgP = orig1[y-vd:y+vd, x-hd:x+hd]
res = decreaseDim(imgP) // REFER TO preProcess()
a = np.array(res)


**** Dec 25 ****
// enhance the whole image
(a,b),(c,d),(e,f), max = mode(orig1[y-vd:y+vd, x-hd:x+hd], 10, -1) // debug
H, edges = np.histogramdd(a, bins = (nbins, nbins, nbins)) // debug

//REFER TO preProcess()
copy = np.copy(orig1)
normVal = np.array(enhance(copy, 1, 10, 0))
enh = blur(copy, 10, 10, 1)

copy = np.copy(orig1)
norm = normalize(normVal, enh, copy, 10)



**** Dec 26 ****
// integrated function
blr, norm = preProcess(orig1, 10, 10)


**** Dec 28 ****
os.chdir('wd/2018-19FYP/chip_v2/20181113')
def readin(orig, read, thre, i, fold):
		if (read == 1):
			orig = cv2.imread(orig)
		gray = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)
		ret, thresh = cv2.threshold(gray, thre, 255, 0)
		show(thresh, fold)
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return
		tinv = cv2.bitwise_not(thresh)

		image, contours, hierarchy = cv2.findContours(tinv,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
		cst = sorted(contours, key = lambda x: cv2.contourArea(x))
		c1 = cst[len(cst) - i]
		mask1 = np.zeros_like(gray)
		mask1 = cv2.drawContours(mask1, [c1], -1, (255, 255, 255), -1)
		show(mask1, fold)
		if cv2.waitKey(0) & 0xFF == ord('l'):     # if current contour larger than chip
			return readin(name, thre, i + 1, fold)
	
		elif cv2.waitKey(0) & 0xFF == ord('s'):   # if current contour smaller than chip
			return readin(name, thre, i - 1, fold)

		elif cv2.waitKey(0) & 0xFF == ord('a'):   # abandon
			return

		else:
			return c1, gray, orig, mask1

chipct1, gray1, orig1, chip1 = readin('20181119_AMP1_9_30min.jpg', 1, 100, 2, .1)
blr, norm = preProcess(orig1, 10, 10)
chipct1, gray1, orig1, chip1 = readin(norm, 0, 100, 2, .1)

// test for other img
chipct1, gray1, orig1, chip1 = readin('3.jpg', 1, 100, 2, .4)
blr, norm = preProcess(orig1, 10, 10, .4)
chipct1, gray1, orig1, chip1 = readin(norm, 0, 100, 2, 1)

// try to normalize LAB
lab = cv2.cvtColor(orig1, cv2.COLOR_BGR2LAB)
blr, norm = preProcess(lab, 10, 10, .4)
chipct1, gray1, orig1, chip1 = readin(norm, 0, 100, 2, 1)