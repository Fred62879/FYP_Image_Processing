#
# designed for version 1 benchmarking
# Images under this directory are all sotred in the way that
# those of the same chip (3 light conditions * 2 time points)
# are placed in one folder (e.g. 0/1/.../5)

**** Process ****
def name(ip, op):
	error = []
	for folder in os.listdir(ip):
		curin = os.path.join(ip, folder)
		curout = os.path.join(op, folder)
		for filename in os.listdir(curin):
			inname = os.path.join(curin, filename)
			outname = os.path.join(curout, filename)
			try:
				orig, gray, chipct, chip, warp, restr = process(inname, 100, 0.1, 0)
			except:
				error.append(inname)
				cv2.imwrite(outname, np.zeros(shape = (1, 1)))
				continue
			cv2.imwrite(outname, restr)
	return error

#os.chdir('wd/2018-19FYP/chip_v2')
os.chdir('wd/2018-19FYP/chip_v2/Benchmarking/20190305/version1') # Mar 16
b = name('20190305_lightconditions','20190305_lightconditions_n')


**** Distance ****
// integrate cal with readin, reduce mem usage
// for each time point, maintain image set, calculate distance within
def readin(curDir, curt1, curt2, nl):
	count = 0
	for filename in os.listdir(curDir):
		img = cv2.imread(os.path.join(curDir, filename))
		if ((count < nl) & (img is not None) & (img.shape != (1,1,3))):
			curt1.append(img)
		elif ((count >= nl) & (img is not None) & (img.shape != (1,1,3))):
			curt2.append(img)
		count = count + 1
# test
curt1 = []
curt2 = []
readin('20190305_lightconditions_n/5', curt1, curt2, 3)
img = cv2.imread('20190305_lightconditions_n/5/t1l1_20190305_43_bench_330lux_2min_LB.jpg')
# end

def cal(curt, curDist, allDist):
	if (len(curt) <= 1):
		return
	for i in range(1, len(curt)):
		curDist.append(np.sum((curt[i]-curt[0])**2))
	allDist.append(curDist)

# test
allDist = []
cal(curt1, [], allDist)
i1 = cv2.imread('20190305_lightconditions_n/5/t1l2_20190305_43_bench_flash_5min_LB.jpg')
i2 = cv2.imread('20190305_lightconditions_n/5/t1l3_20190305_43_lighttray_900lux_1min_LB.jpg')
np.sum((i1-i2)**2)
cal(curt2, [], allDist)
# end

# nl is the NO. of light conditions
def distanceAll(root, nl):
	allDist = []
	curt1 = []
	curt2 = []
	for dirs in os.listdir(root):
		del curt1[:]
		del curt2[:]
		readin(os.path.join(root, dirs), curt1, curt2, nl)		
		cal(curt1, [], allDist)
		cal(curt2, [], allDist)
	return allDist

allDist = distanceAll('20190305_lightconditions_n', 3)


**** Normalize ****
def norm(ip, op, para, wr, thre):
	curout = []
	for folder in os.listdir(ip):
		curin = os.path.join(ip, folder)
		del curout[:]
		for i in range(0, 3):
			curout.append(os.path.join(op[i], folder))
		for filename in os.listdir(curin):
			inname = os.path.join(curin, filename)
			for i in range(0, 3):
				outname = os.path.join(curout[i], filename)
				img = cv2.imread(inname)
				if (img.shape == (1,1,3)):
					cv2.imwrite(outname, img)
					continue
				norm = lightAdjust(img, para, i, wr, .1)
				cv2.imwrite(outname, norm)
# test
para = [7, 6, 20, 27, 40, 30, 35, 30, 15, 25]
op = ['20190305_lightconditions_wr','20190305_lightconditions_wp1','20190305_lightconditions_wp2']
norm('20190305_lightconditions_n', op, para, [2,1,1], .1)

wrdist = distanceAll('20190305_lightconditions_wr', 3)
wp1dist = distanceAll('20190305_lightconditions_wp1', 3)
wp2dist = distanceAll('20190305_lightconditions_wp2', 3)


**** Dissect Patch from spot ****
// write out as collect, spot patch same folder
def dissect(ip, op):
	error = []
	for folder in os.listdir(ip):
		curin = os.path.join(ip, folder)
		curout = os.path.join(op, folder)
		for filename in os.listdir(curin):
			inname = os.path.join(curin, filename)
			img = cv2.imread(inname)
			if img is None:
				error.append(inname)
				continue

			outname = os.path.join(curout, filename)
			outname = outname[0: len(outname)-4]
			outspot = outname + "_spot.JPG"
			outpatch = outname + "_patch.JPG"
			
			if (img.shape == (1,1,3)):
				cv2.imwrite(outspot, img)
				cv2.imwrite(outpatch, img)
				continue
			spot, patch, spotMask, patchMask = spotEx(img, para, 2, 0)
			cv2.imwrite(outspot, spot)
			cv2.imwrite(outpatch, patch)
	return error

e = dissect("20190305_lightconditions_wr", "20190305_lightconditions_wr_dissect")

// different folders_not fully implemented
def dissect(ip, op, suffix, cho):
	for folder in os.listdir(ip):
		curin = os.path.join(ip, folder)
		curout = os.path.join(op, folder)
		for filename in os.listdir(curin):
			inname = os.path.join(curin, filename)
			img = cv2.imread(inname)
			if img is None:
				error.append(inname)
				continue

			outname = os.path.join(curout, filename)
			outname = outname[0: len(outname)-4]
			outname = outname + suffix
			
			if (img.shape == (1,1,3)):
				cv2.imwrite(outname, img)
				continue
			spot, patch, Mask = spotEx(img, para, 2)
			if (cho == 0):
				cv2.imwrite(outname, spot)
			else:
				cv2.imwrite(outname, patch)

e = dissect("20190305_lightconditions_wr", "20190305_lightconditions_wr_dissect", "_spot.jpg", 0)

**** Data export ****
// Mar 15
# for each spot/patch data list in dt, cast it to have 
# values in the same channel on the same row
# [r1,g1,b1], [r2,g2,b2], [r3,g3,b3]£¬... [rn,gn,bn]
# [r1,r2,r3,...,rn],[g1,g2,g3,...],[b1,b2,...]
def convert(dt):
	newdt = []
	for i in range(0, len(dt)):
		cur = dt[i]
		a, b = cur.shape
		for k in range(0, 3):
			newcur = []
			for j in range(0, a):
				newcur.append(dt[i][j][k])
			newdt.append(np.array(newcur))
	return np.array(newdt)

# wrout given chip data
def wrout(filename, dt):
	newdt = convert(dt)
	with open(filename, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, len(newdt)):
			b = writer.writerow(newdt[i])

def dataOut(root):
	curimg = []
	for folder in os.listdir(root):
		curdir = os.path.join(root, folder)
		clear curimg[:]
		for img in os.listdir(curdir):
			img = cv2.imread(os.path.join)
			curimg.append(