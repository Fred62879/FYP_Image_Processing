# disclose precise spot area from the chip, adjust for variations in real spot shape and size
# para: img - chip img
# 	rw * cl chip
# 	rst - horizontal distance between leftmost point of spot at top-left corner
#	      and the blackborder of left edge
# 	cst - vertical distance between topmost ... top edge
# 	hd - horizontal distance between two spots
# 	vd - vertical ...
# 	r - radius of spot
#	dr - radius to draw spot
#
# output: spotF - image where precisely spots are maintained, others areas black
#	  surF - image where precisely spots are black, other areas maintained
#

def spotEx(img, rw, cl, rst, cst, hd, vd, hdd, vdd, r, dr, cho, display, rgbt):
	
	# self-explanatory
	def maskInvAdd(mask, img):
		mask_inv = cv2.bitwise_not(mask)
		img_inv = cv2.bitwise_not(img)
		merge_inv = cv2.add(mask_inv, img_inv)
		merge = cv2.bitwise_not(merge_inv)
		return merge
	 
	# Cover spot or sur of patch center around cr,cc in img
	# para:
	#
	# output: 
	#
	def cover(img, cr, cc, dr):
		mask = np.zeros_like(img)
		mask_inv = cv2.circle(mask, (cr, cc), dr, (255, 255, 255), -1)
		mask = cv2.bitwise_not(mask_inv)

		sur = maskInvAdd(mask, img)      # spot areas are black
		spot = maskInvAdd(mask_inv, img) # patch areas are black
		return sur, spot

	# Find the mean value of selected channels in img
	# para:
	#
	# output:
	#
	def white(img, choice):
		x,y,c = img.shape # prepare data
		dt = np.reshape(img, (x*y, c))
		a = dt[(dt != 0).all(axis = (1))] # remove black pixels
		m1, m2, m3 = np.mean(a, axis = 0)
		if (choice == 0):
			return m1, m2, m3
		return m2

	# Adjust the shape of spot center around cr,cc in img
	# para: res - final adjusted image, roi replaced recursively
	#	cho - 0,use mean of spot and sur s mean as s threshold
	#	      1,use spot s mean; otherwise use sur s mean
	#	display - 1, display image at each step; otherwise no
	#	rgbt - 1, run thresholding based on rgb; otherwise no 
	#
	# output:
	#
	def adjustEachSpot(img, res, hdd, vdd, cr, cc, dr, cho, display, rgbt):
		# crop patch
		patch = img[cr-vdd:cr+vdd, cc-hdd:cc+hdd]
		patch_hsv = cv2.cvtColor(patch, cv2.COLOR_BGR2HSV)
		cmask = np.zeros_like(patch)
		cmask = cv2.circle(cmask, (hdd, vdd), dr, (255, 255, 255), -1)

		# find thresholding value
		surE, spotE = cover(patch, hdd, vdd, dr)
		surE_hsv = cv2.cvtColor(surE, cv2.COLOR_BGR2HSV)
		spotE_hsv = cv2.cvtColor(spotE, cv2.COLOR_BGR2HSV)

		mr, mg, mb = white(surE, 0) # mean value of ... in 
		msl = white(surE_hsv, 1)     # current patch
		msh = white(spotE_hsv, 1)
		ts = 0
		if (cho == 0):
			ts = (msl + msh) / 2
		elif (cho == 1):
			ts = msl
		else:
			ts = msh

		# s value thresholding
		smask = (patch_hsv[:,:,1] > ts).astype(np.uint8)
		cmask = cmask * smask[:,:,None]
		a = maskInvAdd(cmask, patch)
		if (display == 1):
			show(a, 1)
			if cv2.waitKey(0) & 0xFF == ord('a'):
				return
		
		# rgb thresholding
		if (rgbt == 1):
			rgbmask = ((patch < np.array([mr, mg, mb])).any(axis = 2)).astype(np.uint8)
			cmask = cmask * rgbmask[:,:,None]
			a = maskInvAdd(cmask, patch)
			if (display == 1):
				show(a, 1)
				if cv2.waitKey(0) & 0xFF == ord('a'):
					return

		# replace roi and return
		res[cr-vdd:cr+vdd, cc-hdd:cc+hdd] = a
		return res

	# locate precise spot position
	spot = np.zeros_like(img)
	for i in range(0, rw):          # spot in row i
		for j in range(0, cl):  #         col j
			centerRow = cst + i*vd + (2*i+1)*r
			centerCol = rst + j*hd + (2*j+1)*r
			res = adjustEachSpot(img, spot, hdd, vdd, centerRow, centerCol, dr, cho, display, rgbt)
			if (display == 1):
				show(spot, 1)
				if cv2.waitKey(0) & 0xFF == ord('a'):
					return
	show(spot, 1)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	
	# reverse to get sur
	rmask = ((spot == np.array([0, 0, 0])).all(axis = 2)).astype(np.uint8)
	sur = restr * rmask[:,:,None]
	show(sur, 1)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return

	# making the mask
	tmask = ((sur == np.array([0, 0, 0])).all(axis = 2)).astype(np.uint8)
	a = np.full((420, 420, 3), np.array([255,255,255]), dtype = 'uint8')
	surMask = a * tmask[:,:,None]
	spotMask = a * rmask[:,:,None]

	return spot, sur, spotMask, surMask
