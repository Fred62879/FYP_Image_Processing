#
#
#
#
#
#

def colorProcess():

	# 
	# para: 
	#
	# output:
	#
	def shapeAdjust():
		

	
		

	# process the given chip
	# para: shape_adjust - 0, do not adjust spot shape
	#	light_adjust - 0, unprocessed; 1, white patch;
	#		       2, grey world; 3, reference chart
	#	repre_val: - 0, histogram squeezing; 1, mean; 2, mode; 3 median
	#	chip - image for chip
	#
	# output: a list of ten number represents quantitative result for
	#	  each sensor cell line
	#
	def chipProcess(shape_adjust, light_adjust, repre_val, chip, rw, cl, hoffset, voffset, hdist, vdist):
		res = []
		process = np.copy(chip)

		# spot shape adjustment
		if (shape_adjust != 0):
			spot, sur = shapeAdjust(process)

		# ambient light adjustment
		if (light_adjust != 0):
			process = lightAdjust(light_adjust, spot, sur)

		# spot abstraction - yield spot representative value
		for sensor in range(1, 10):
			if (sensor <= 7):
				idL = [2,3,4,5] + 6 * (sensor-1)
			else:
				idL = [0,1,6,7] + 12 * (sensor-8)
			for i in range(0, 3):
				id = idL[i] // spot id (topLeft -> bottomRight: 0-41)
				cr = id / 6 // row number
				cc = id % 6
				rcoor = roffset + cc*hdist + (2*cc+1)*r // row coordinate
				ccoor = coffset + cr*vdist + (2*cr+1)*r
				curSpot = process[y - vdd: y + vdd, x - hdd: x + hdd]
				res.append(repreVal(repre_val, curSpot))
		return np.array(res)