# Apr 2 2019 update
# Folder name changed
# ..._n -> ..._c (stores cropped chip)
# ..._wp -> ..._nwp1 (stores normalized chip using wp1) (same applies to other algr)

# designed for version 2 benchmarking
# Images under this directory are all sotred in the way that
# those of the same light (6 chips * 2 time points)
# are placed in one folder (e.g. light1/2/3)

os.chdir('wd/2018-19FYP/chip_v2/Benchmarking/20190305/version2')

**** Process ****
# v1 arrangement_for distance calculation
# v2 rearrangement_for other two measures
def crop(ip, op):
	error = []
	for folder in os.listdir(ip): # either chipid (v1) or light (v2)
		curin = os.path.join(ip, folder)
		curout = os.path.join(op, folder)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)
			try:
				orig, gray, inner, chip, warp, restr = process(inname, 100) # v5
			except:
				error.append(inname)
				cv2.imwrite(outname, np.zeros(shape = (1, 1)))
				continue
			cv2.imwrite(outname, restr)
	return error


**** Distance ****
// version 1 folder arrangement
# collect all imgs, including unhandled
def collect(curDir, curt1, curt2, nl):
	count = 0
	for imgnm in os.listdir(curDir):
		img = cv2.imread(os.path.join(curDir, imgnm))
		if ((count < nl) & (img is not None)):
			curt1.append(img)
		elif ((count >= nl) & (img is not None)):
			curt2.append(img)
		count = count + 1

# unhandled, placehold with -1
def cal(curt, curDist, allDist):
	for i in range(0, len(curt) - 1):
		for j in range(i + 1, len(curt)):
			if (curt[i].shape == (1,1,3) or curt[j].shape == (1,1,3)):
				curDist.append(-1)
			else:
				x,y,z = curt[i].shape
				curDist.append( (np.sum((curt[i]-curt[j])**2)) // (x*y) )
	allDist.append(np.array(curDist))

def distanceAll(cropDir, nl):
	allDist = []
	curt1 = []   # timepoint 1
	curt2 = []
	for light in os.listdir(cropDir):
		del curt1[:]
		del curt2[:]
		collect(os.path.join(cropDir, light), curt1, curt2, nl)		
		cal(curt1, [], allDist)
		cal(curt2, [], allDist)
	return np.array(allDist)

# allDist[0/1] - t1/2 chip 1
# allDist[0][0~2] - dist between l1&l2, l1&l3, and l2&l3


**** Normalize & Data output_img-wise ****
def normCollect(ip, op, para, choa, thre, stadrd, shape):
	pdt = []	# patch RGB for imgs under all lights using choa\th algr
	sdt = []	# spot...
	for light in os.listdir(ip):  # light conditions
		clpdt = []	      # patch RGB for all imgs under cur_light...
		clsdt = []	      # spot...
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin): # imgs under current light
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)

			clcipdt = []
			clcisdt = []
			img = cv2.imread(inname)
			if (img.shape == (1,1,3)):
				cv2.imwrite(outname, img)
				clpdt.append(np.full(shape, -1))
				clsdt.append(np.full(shape, -1))
				continue
			if (choa == 3):
				clcipdt, clcisdt = lightAdjust(img, para, choa, thre, stadrd) # v5
			else: 
				norm, clcipdt, clcisdt = lightAdjust(img, para, choa, thre, stadrd) # v5
				cv2.imwrite(outname, norm)
			# return outname
			# collect RGB value
			clpdt.append(clcipdt) # append RGB of all patches of cur img
			clsdt.append(clcisdt)
		pdt.append(np.array(clpdt))
		sdt.append(np.array(clsdt))
	return np.array(pdt), np.array(sdt)

def wroutPS(dt, op):
	nlght, nimg, nbk, nch = dt.shape
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, nlght):                # light i
			for j in range(0, nimg):         # img j
				for k in range(0, nbk): # block k
					b = writer.writerow(dt[i][j][k])
def wrout(p, s, algr, nm, op):
	wroutPS(p, op + algr + nm[0])
	wroutPS(s, op + algr + nm[1])


**** Histogram peak check ****
// adapted from bm_v3, hist only for one selected channel
def createFolders(ip, op):
	for light in os.listdir(ip):
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin):
			outdir = os.path.join(curout, imgnm[0:len(imgnm)-4])
			if not os.path.exists(outdir):
				os.makedirs(outdir)

def hist(ip, op, para, choa, thre, standard, ch):
	for light in os.listdir(ip):
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			img = cv2.imread(inname)
			if (img.shape == (1,1,3)):
				continue
			outdir = os.path.join(curout, imgnm[0:len(imgnm)-4])
			lightAdjust(img, para, choa, thre, standard, ch, outdir) # v6

# single img
def hist(inname, op, para, choa, thre, standard, ch):
	img = cv2.imread(inname)
	lightAdjust(img, para, choa, thre, standard, ch, op) # v6


**** Data output_across-light ****
// Apr 4
# (I) collect patch/spot image light-wise
def spotMask(img, para, label, curlb):
	rw, cl, hoffset, voffset, hdist, vdist, hdd, vdd, r, dr = para
	cimg = np.copy(img)
	# mask blocks whose spot not in current color group (curlb)
	for i in range(0, rw):
		for j in range(0, cl):
			id = i * cl + j
			x = hoffset + j*hdist + (2*j+1)*r # col no.
			y = voffset + i*vdist + (2*i+1)*r # row no.
			if (label[id] != curlb):
				cimg[y-vdd: y+vdd, x-hdd: x+hdd] = 0
	return cimg

def maskInvAdd(mask, img):
		mask_inv = cv2.bitwise_not(mask)
		img_inv = cv2.bitwise_not(img)
		merge_inv = cv2.add(mask_inv, img_inv)
		merge = cv2.bitwise_not(merge_inv)
		return merge

def simpleCover(img, para, dr):
	rw, cl, rst, cst, hd, vd, hdd, vdd, r, x = para
	mask = np.zeros_like(img)
	for i in range(0, rw):          # spot in row i
		for j in range(0, cl):  #         col j
			cr = cst + i*vd + (2*i+1)*r
			cc = rst + j*hd + (2*j+1)*r
			mask_inv = cv2.circle(mask, (cc, cr), dr, (255, 255, 255), -1)
	mask = cv2.bitwise_not(mask_inv)
	patch = maskInvAdd(mask, img)      # spot areas are black
	spot = maskInvAdd(mask_inv, img)
	# show(patch, 1)
	return patch, spot

def imgCollectLightWise(ip, label, nimg, nlb, pr, sr):
	lwp = [] # lightwise collection of patch images
	lws = [] # lw col of spot images based on labels
	lwa = [] # lw col of intact images
	for light in os.listdir(ip):  # light conditions
		clp = []
		cls = []
		cla = []
		for i in range(0, nlb):
			cls.append([])
		imgct = -1	      # cur img id
		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):  # imgs under current light
			imgct = imgct + 1	 # increment cur img id
			img = cv2.imread(os.path.join(curin, imgnm))
			x, y, z = img.shape
			if ((x,y,z) == (1,1,3)):
				continue

			# intshow(img)
			mask = remediate(img)
			img = maskInvAdd(mask, img)
			# intshow(img)
			cla.append(img)
			# i) white area assemble
			patch, spot = simpleCover(img, para, pr) # refer to ** Dissect ** below
			clp.append(patch)
			# ii) spot area assemble
			patch, spot = simpleCover(img, para, sr) # refer to ** Dissect ** below
			for lb in range(0, nlb):
				mimg = spotMask(spot, para, label[imgct], lb + 1)
				cls[lb].append(mimg)
				# intshow(mimg)
		lwp.append(np.array(clp))
		lws.append(np.array(cls))
		lwa.append(np.array(cla))
	return lwp, lws, lwa

# lwa[0] - Under light1
# lwa[0][0] - image 1
# lwp[0][0] - patch 1 (image 1 where spots are black)
# lws[0][0] - label 1
# lws[0][0][0] - spot 1 £¨image 1 where spots not of label 1 are black)

def shuffleSpot(spotCol):
	res = [[],[],[]]
	nlb = spotCol[0].shape[0]
	for lb in range(0, nlb):
		for light in range(0, len(spotCol)):
			res[lb].append(spotCol[light][lb])
	return res

# res[0] - color 1
# res[0][0] - light 1
# res[0][0][0] - img 1

# (II) plot histogram lw and store
def lwHist(imgCol, op):
	prefix = ['light1_', 'light2_', 'light3_']
	suffix = ['R.png', 'G.png', 'B.png']
	histCol = []
	for light in range(0, 3):
		curltHist = []
		nimg, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		for ch in range(0, 3):
			outname = os.path.join(op, prefix[light] + suffix[ch])
			hist = histogram(dt, 1, ch, 0, 1, outname, 0, 1, 0)
			curltHist.append(hist)
		histCol.append(np.array(curltHist))
	return np.array(histCol)

# (III) output Madeup data across light_Apr 5
def dataMakeupIndivd(hist, thre):
	mx = max(hist)
	p = 0
	lo = []   # count(/thre) from p leftward until less than thre
	hi = []   # ... right...
	for i in range(0, 255):
		if (hist[i] == mx):
			p = i
			break
	for i in range(p - 1, 0, -1):
		if (hist[i] >= thre):
			lo.append(math.ceil(hist[i] / thre))
		else:
			break
	for i in range(p + 1, 255):
		if (hist[i] >= thre):
			hi.append(math.ceil(hist[i] / thre))
		else:
			break
	res = [p] * (math.ceil(mx / thre))
	for i in range(0, len(lo)):
		for j in range(0, lo[i]):
			res.append(p - i - 1)
	for i in range(0, len(hi)):
		for j in range(0, hi[i]):
			res.append(p + i + 1)
	# return p, lo, hi, np.array(res)
	return np.array(res)

# for spot
def dataMakeupIndivd(hist):
	mx = max(hist)
	p = 0
	lo = []   # count(/thre) from p leftward until less than thre
	hi = []   # ... right...
	for i in range(0, 255):
		if (hist[i] == mx):
			p = i
			break
	for i in range(p - 1, 0, -1):
		if (hist[i] >= (mx/2)):
			lo.append(math.ceil(hist[i] / (mx/2)))
		else:
			break
	for i in range(p + 1, 255):
		if (hist[i] >= (mx/2)):
			hi.append(math.ceil(hist[i] / (mx/2)))
		else:
			break
	res = [p] * (math.ceil(mx / (mx/2)))
	for i in range(0, len(lo)):
		for j in range(0, lo[i]):
			res.append(p - i - 1)
	for i in range(0, len(hi)):
		for j in range(0, hi[i]):
			res.append(p + i + 1)
	# return p, lo, hi, np.array(res)
	return np.array(res)

# res[0] - R channel
# res[0][0] - light 1 data

def dataMakeUp(imgCol, thre):
	res = [[],[],[]]
	length = [[],[],[]]
	for light in range(0, 3):
		nimg, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		for ch in range(0, 3):
			orighist = histogram(dt, 1, 0, ch, 0, 0, '', 0, 0, 1, 0, 7)
			newdt = dataMakeupIndivd(orighist, thre)
			newhist = histogram(newdt, 1, 1, 0, 0, 0, '', 1, 0, 1, 0, 7)
			res[ch].append(newdt)
			length[ch].append(len(newdt))
	return res, length


def export(imgCol, op, thre):
	dt, sz = dataMakeUp(imgCol, thre)
	nm = ['R.csv', 'G.csv', 'B.csv']
	for ch in range(0, 3):
		ssz = str(sz[ch][0]) + '_' + str(sz[ch][1]) + '_' + str(sz[ch][2])
		outname = os.path.join(op, ssz + '_' + nm[ch])
		with open(outname, 'w', newline = '') as f:
			writer = csv.writer(f, delimiter = ',')
			for light in range(0, 3):
				for id in range(0, sz[ch][light]):
					out = dt[ch][light][id]
					b = writer.writerow([out])


**** MAD ****
def mad(dt):
	med = np.median(dt)
	res = abs(dt - med)
	return sum(res) / len(dt)

def madAllChnl(img):
	res = []
	rimg = remediate(img)
	pimg = simpleCover(rimg, para, 18)
	# hist = histogram(pimg, 0, 0, 0, 0, 0, '', 1, 0, 1, 0, 0)
	x, y, z = img.shape
	dt = np.reshape(img, (x*y, z))
	for ch in range(0, 3):
		cdt = dt[:, ch]
		cdt = cdt[np.logical_and(cdt != 0, cdt != 255)]
		res.append(mad(cdt))
	return res

# blur image first
def madAllChnl(img):
	res = []
	mask = remediate(img)
	blur = cv2.bilateralFilter(img,9,75,75)

	fimg = simpleCover(blur, para, 18)
	fimg = maskInvAdd(mask, fimg)
	fimg = fimg[12:420,:]
	x, y, z = fimg.shape
	dt = np.reshape(fimg, (x*y, z))
	for ch in range(0, 3):
		cdt = dt[:, ch]
		cdt = cdt[np.logical_and(cdt != 0, cdt != 255)]
		# hist = histogram(cdt, 1, 1, 0, 0, 0, '', 1, 0, 1, 0, 0)
		res.append(mad(cdt))
	return res

# for collected spot
def madAllChnl(img):
	res = []
	x, y, z = img.shape
	dt = np.reshape(img, (x*y, z))
	for ch in range(0, 3):
		cdt = dt[:, ch]
		cdt = cdt[np.logical_and(cdt != 0, cdt != 255)]
		# hist = histogram(cdt, 1, 1, 0, 0, 0, '', 1, 0, 1, 0, 0)
		res.append(mad(cdt))
	return res

// (I) Img-wise/across blocks
# readin
def madIw(ip):
	res = [[],[],[]]
	cl = -1
	for light in os.listdir(ip):
		cl = cl + 1
		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			img = cv2.imread(inname)
			if (img.shape == (1, 1, 3)):
				continue
			res[cl].append(madAllChnl(img))
		res[cl] = np.array(res[cl])
	return res

# res[0] - light 1
# res[0][0] - img 1
# res[0][0][0] - R channel

# from collection
def madIw(col):
	res = [[],[],[]]
	for light in range(0, len(col)):
		for id in range(0, col[light].shape[0]):
			img = col[light][id]
			res[light].append(madAllChnl(img))
		res[light] = np.array(res[light])
	return res

def meanMadIw(res, nl):
	ans = []
	for i in range(0, nl):
		ans.append([])
	for i in range(0, len(res)): # cur light
		ni, nc = res[i].shape
		dt = res[i].transpose(1, 0)
		for ch in range(0, 3):
			ans[i].append(np.mean(dt[ch]))
		ans[i] = np.array(ans[i])
	return np.array(ans)

ans[0] - light 1
ans[0][0] - R channel

// (II) Light-wise/across imgs
def madLw(imgCol, nl):
	ans = []
	for i in range(0, nl):
		ans.append([])
	for light in range(0, nl):
		ni, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (ni*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		dt = dt[(dt != 255).all(axis = (1))]
		for ch in range(0, 3):
			# if (ch == 2 and light == 1):
			#	hist = histogram(dt, 1, 0, ch, 0, 0, '', 1, 0, 1, 0, 0)
			ans[light].append(mad(dt[:,ch]))
		ans[light] = np.array(ans[light])
	return np.array(ans)

ans[0] - light 1
ans[0][0] - R channel

// (III) Across-lights
def madAl(imgCol, nl):
	ans = []
	adt = []
	for i in range(0, nl):
		ni, x, y, z = imgCol[i].shape
		dt = np.reshape(imgCol[i], (ni*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		dt = dt[(dt != 255).all(axis = (1))]
		if (i == 0):
			adt = dt
		else:
			adt = np.concatenate((adt, dt), axis = 0)
	for ch in range(0, 3):
		if (ch == 0):
			hist = histogram(adt, 1, 0, ch, 0, 0, '', 1, 0, 1, 0, 0)
		ans.append(mad(adt[:,ch]))
	return np.array(ans)


**** Spot uniformity ****



**** Spot distintness ****
// histogram
# for single image
def prepareIw(imgColsf, ltid, imgid, nlb, ch):
	col = []
	hcol = []
	for i in range(0, nlb):
		col.append(imgColsf[i][ltid][imgid])
	for i in range(0, len(col)):
		img = col[i]
		dt = np.reshape(img, (420*420, 3))
		dt = dt[(dt != 0).all(axis = (1))]
		dt = dt[(dt != 255).all(axis = (1))][:,ch]
		hist, bins = np.histogram(dt, 256, [0,256])
		hcol.append(hist)
	return hcol

# for img under same light
def prepareLw(imgColus, ltid, nlb, ch):
	hcol = []
	cur = imgColus[ltid]
	nimg, x, y, z = cur[0].shape
	for i in range(0, nlb):
		dt = np.reshape(cur[i], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		dt = dt[(dt != 255).all(axis = (1))][:,ch]
		hist, bins = np.histogram(dt, 256, [0,256])
		hcol.append(hist)
	return hcol

# across all lights
def prepareAl(imgColsf, nlb, ch):
	hcol = [] # color-wise collection of histogram
	for i in range(0, nlb):
		cur = imgColsf[i]
		adt = []
		c = 1
		for light in range(0, len(cur)):
			nimg, x, y, z = cur[light].shape
			dt = np.reshape(cur[light], (nimg*x*y, z))
			dt = dt[(dt != 0).all(axis = (1))]
			dt = dt[(dt != 255).all(axis = (1))][:,ch]
			if (c == 1):
				adt = dt
				c = 0
			else:
				adt = np.concatenate((adt, dt))
		hist, bins = np.histogram(adt, 256, [0,256])
		hcol.append(hist)
	return hcol

def draw(hcol, lw):
	h1, h2, h3 = hcol
	plt.plot(h1, 'r-', label = 'color1', linewidth = lw)
	plt.plot(h2, 'g-', label = 'color2', linewidth = lw)
	plt.plot(h3, 'b-',  label = 'color3', linewidth = lw)
	plt.xlim([0,256])
	plt.legend(loc='best')
	plt.show()


**** Thresholding new images ****
def testImgDataOut(ip, op, para, choa, thre, standard):
	sdt = []	# spot RGB for imgs under all lights using choa\th algr
	for light in os.listdir(ip):
		clsdt = []	      # spot RGB for all imgs under cur_light...
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)
			img = cv2.imread(inname)
			clcisdt = []
			# crop
			try:
				orig, gray, inner, chip, warp, restr = process(inname, 100) # v5
				# intshow(restr)
			except:
				error.append(inname)
				cv2.imwrite(outname, np.zeros(shape = (1, 1)))
				clsdt.append(np.full((42, 3), -1))
				continue
			# normalize
			norm, clcipdt, clcisdt = lightAdjust(restr, para, choa, thre, standard) # v5
			cv2.imwrite(outname, norm)
			clsdt.append(clcisdt)
		sdt.append(np.array(clsdt))
	return np.array(sdt)

def wrout(dt, op):
	nlght, nimg, nbk, nch = dt.shape
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, nlght):                # light i
			for j in range(0, nimg):         # img j
				for k in range(0, nbk): # block k
					b = writer.writerow(dt[i][j][k])
