# @para imgnm: directory of img
#       thlg: large square threshold
#	thsm: small...
#       lgctnm: contour num for large square
#       smctnm: ...small...
# @output: 
#
# para: warped: perspectively transformed chip area
#	img-original image read in
# 	rsz-display fold
# 	warped - perspectively transformed chip area
# 	rw * cl chip
# 	rst: horizontal distance between left edge and rightmost point of 
#            larger circle surrounding the first spot
# 	cst: vertical distance ...
# 	cext: vertical distance between two surrounding circles in a column
# 	lr: radis of surrounding circle of spot
# 	sr: radius of spot
#
# output: 
#
#

# def intenExtract(imgnm, thlg, thsm, lgctnm, smctnm): # persTrans

def intenExtract(warped, imgnm, threshold, sz, rw, cl, rst, cst, cext, lr, sr):

	# display resized image
	def show(img, fold):
		rsz = cv2.resize(img, None, fx = fold, fy = fold)
		cv2.imshow('img',rsz)

	# read in the image
	# para: name - name of the image, e.g. 'xxx.jpg'
	#	thre - set-up threshold for the thresholding
	#	i - index (counting from the last) of the contour to be extracted from the list of
	#	    sorted contours with increasing contour area, e.g. i = 1 gives the largest/last contour
	#	fold - display fold
	#
	# output: c1 - the target contour, e.g. of the chip area
	#	  gray - gray scale image of orig
	#	  orig - original image read in
	#	  mask1 - a black image where only areas enclosed by c1 is white
	#
	def readin(name, thre, i, fold):
		orig = cv2.imread(name)
		gray = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)
		ret, thresh = cv2.threshold(gray, thre, 255, 0)
		show(thresh, fold)
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return
		tinv = cv2.bitwise_not(thresh)

		image, contours, hierarchy = cv2.findContours(tinv,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
		cst = sorted(contours, key = lambda x: cv2.contourArea(x))
		c1 = cst[len(cst) - i]
		mask1 = np.zeros_like(gray)
		mask1 = cv2.drawContours(mask1, [c1], -1, (255, 255, 255), -1)
		show(mask1, fold)
		if cv2.waitKey(0) & 0xFF == ord('l'):     # if current contour larger than chip
			return readin(name, thre, i + 1, fold)
	
		elif cv2.waitKey(0) & 0xFF == ord('s'):   # if current contour smaller than chip
			return readin(name, thre, i - 1, fold)

		elif cv2.waitKey(0) & 0xFF == ord('a'):   # abandon
			return

		else:
			return c1, gray, orig, mask1

	# draw spots from intensity extracted - check correctness
	def restorea(res, fold, rw, cl, rst, cst, cext, lr, sr, warped, sur):
		panel = np.zeros_like(warped)
		d = fold * lr
		r = fold * sr
		if (sur == 'true'):
			r = d
		for i in range(0, rw):
			for j in range(0, cl):
				id = i * 6 + j
				x = rst + (2*j + 1)*d
				y = cst + (2*i + 1)*d + i*cext
				panel[y - r: y + r, x - r: x + r] = res[id]
		show(panel, 1)

	# clear function for single square
	def clear(res, id, le):
		for i in range(0, le):
			for j in range(0, le):
				if ((res[id][i][j] == [255, 255, 255]).all()):
					res[id][i][j] = ([0, 0, 0])

	# convert white background to black
	def nowhite(res, ro, cl, le):
		for a in range(0, ro):
			for b in range(0, cl):
				id = a * 6 + b
				clear(res, id, le)
		return res

	# extract intensity values from target area
	# if isSur -- extract from large square
	# if !isSur -- extract from minimum square containing spot
	def inten(merge, fold, rw, cl, rst, cst, cext, lr, sr, isSur):
		# res = np.empty(shape = (36, 120, 120, 3), dtype = int)
		res = []
		d = lr * fold
		r = sr * fold
		if (isSur == 'true'):
			r = d
		for i in range(0, rw):
			for j in range(0, cl):
				x = rst + (2*j + 1)*d
				y = cst + (2*i + 1)*d + i*cext
				res.append(merge[y - r: y + r, x - r: x + r])
		return res


	# for persTrans
	# lg, gray, orig = readin(imgnm, thlg, lgctnm) # img name / threshold / contour id
	# sm, gray, orig = readin(imgnm, thsm, smctnm)
	# warped = persTrans(lg, sm, orig, gray, 420, 0.1) # persTransformed chip area

	lg, gray, orig = readin(imgnm, threshold, 2)
	warped = nonPersTrans(lg, orig, gray, sz, 0.2)
	merge, mergeExSpot = spotEx(warped)

	spot = inten(merge, 1, rw, cl, rst, cst, cext, lr, sr, 'false') # intensity for 36 squares
	spot = nowhite(spot, rw, cl, 30)                                # intensity for 36 spots

	surr = inten(mergeExSpot, 1, rw, cl, rst, cst, cext, lr, sr, 'true')
	surr = nowhite(surr, rw, cl, 70)
	restorea(spot, 1, rw, cl, 0, 0, 0, 35, 15, warped, 'false')
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return

	restorea(surr, 1, rw, cl, 0, 0, 0, 35, 15, warped, 'true')
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	return spot, surr