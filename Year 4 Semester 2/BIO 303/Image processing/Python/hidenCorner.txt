# find hiden point of the daunted corner
# para: chipcrj-four corners of the major chip area (clockwise ordered)
#	 chipcrr-three corners of the minor chip area
#
#
#  newpPre     newp
#    ------------
#    |            | newpCls
#    |            |
#    |            |
#    |            |
#    |            |
#    -------------- newpClsPre
#
# 
# output: dtcr - the really corner hidden by newp and newpCls (e.g. top-right corner of the above rectangle
# 		 daunted in reality)
#	  dtcrLoc - index of dtcr in chip corner list counting from top left (e.g. 1 in the above rectangle)
#
#

def hideCorner(chipcrj, chipcrr):

	# calculate the slope of the line defined by two given points
	def slope(p1, p2):
		return (p1[1] - p2[1]) / (p1[0] - p2[0])

	# calculate the distance between two given points
	def distance(p1, p2):
		return np.sqrt(((p1[0] - p2[0])**2) + ((p1[1] - p2[1])**2))

	# find the intersection of line1 (p1a -> p1b) & line2 (p2a -> p2b)
	def intersectP(p1a, p1b, p2a, p2b):
		res = p1a
		k1 = slope(p1a, p1b)
		b1 = p1a[1] - k1 * p1a[0]
		k2 = slope(p2a, p2b)
		b2 = p2a[1] - k2 * p2a[0]
		
		res[0] = (b1 - b2) // (k2 - k1)
		res[1] = ((k1 * res[0] + b1) + (k2 * res[0] + b2)) / 2
		return res

	# check correspondence of p1 to points in crj
	# para: p1 - given point
	#	crj - a list of points being corners of the major chip portion
	#
	# output: smal - closet distance of p1 to points in crj
	#	  closep - points in crj closest to p1
	#
	def shortestD(p1, crj):
		smal = math.inf
		closep = p1
		for i in range(0, 4):
			d = distance(p1, crj[i])
			if (smal > d):
				smal = d
				closep = crj[i]
		return smal, closep

	# find the points in crr but not in crj
	# para: crr - a list of points being corners of the minor chip area
	#	crj - a list of points being corners of the major chip area
	#
	# output: newp - the chip corner absent from major chip
	# 	  newpCls - the corner in major chip closest to newp
	#
	def unique(crr, crj):
		if (len(crr) != 3 or len(crj) != 4):
			return 0, 0
		lg = -math.inf
		newp = crr[0]
		newpCls = crr[0]
		for i in range(0, 3):
			smal, closep = shortestD(crr[i], crj)
			if (lg < smal):
				lg = smal
				newp = crr[i]
				newpCls = closep
		return newp, newpCls

	# find the exact corner point of the daunted corner
	# para: newp - the chip corner absent from major chip
	#	newpCls - the corner in major chip closest to newp
	#	cr - a list of points being the corner of the major chip
	# 
	# output: newpClsPre - the other adjacent corner in major to newpCls
	#	  newpPre - the other adjacent corner in major to newp
	#	  intersect(..) - intersect of lines defined by (newp, newpPre) & (newpCls, newpClsPre)
	#	  idx - index of newpCls in cr
	# 
	def findUq(newp, newpCls, cr):
		idx = 0
		newpPre = newp         # the other adjacent corner in mj to newp
		newpClsPre = newpCls   # the other adjacent corner in mj to newpCls
		for i in range(0, 4):  # find idx of newpCls in 4-corner-maj
			if ((cr[i] == newpCls).all()):
				idx = i
				# Assume: dist between newp & newpPre < dist between newpCls & newpPre
				# newp further from next point of newpCls than newpCls is
				if (distance(cr[(i + 1) % 4], newp) > distance(cr[(i + 1) % 4], newpCls)):
					newpPre = cr[(i + 4 - 1) % 4]
					newpClsPre = cr[(i + 1) % 4]
				# newp closer to ...
				else:
					newpClsPre = cr[(i + 4 - 1) % 4]
					newpPre = cr[(i + 1) % 4]
		return newpClsPre, newpPre, intersectP(newp, newpPre, newpCls, newpClsPre), idx


	newp, newpCls = unique(chipcrr, chipcrj)      # two corner points of the daunted chip corner
	newpClsPre, newpPre, dtcr, dtcrLoc = findUq(newp, newpCls, chipcrj)
	return dtcr, dtcrLoc