# Compensate for non-uniform lighting distribution on chip
# para: img - processed image of the chip
#	rw * cl chip
#	h/v_offset - horizontal/vertical distance between left/top_most point of 
#		     the top-left spot and the left/top inner chip edge
#	h/v_dist - horizontal/vertical distance between two spots
#	h/v_dd - half of horizontal/vertical edge length of rectangle extracted
#	r - radius of spot
#	dr - radius for spot drawing
#	nbins - # of bins to do histogram shrinkage, used when repre_val == 0
#	chor - radius choice for white reference
#	chov - representative value choice for white reference
#	threshold - bincount threshold for white patch
#	choa - algorithm choice
#
# output: cpNorm - copy of "process" that is lighting normalized
#	  spotNorm - cpNorm where areas other than spots are black
#	  spotDt - an array of spot data
#

def lightAdjust(img, para, choa, wr, threshold):

	# self-explanatory
	def maskInvAdd(mask, img):
		mask_inv = cv2.bitwise_not(mask)
		img_inv = cv2.bitwise_not(img)
		merge_inv = cv2.add(mask_inv, img_inv)
		merge = cv2.bitwise_not(merge_inv)
		return merge
	 
	# Cover spot or sur of patch center around cr,cc in img
	# para:
	#
	# output: 
	#
	def cover(img, cr, cc, dr):
		mask = np.zeros_like(img)
		mask_inv = cv2.circle(mask, (cr, cc), dr, (255, 255, 255), -1)
		mask = cv2.bitwise_not(mask_inv)

		sur = maskInvAdd(mask, img)      # spot areas are black
		spot = maskInvAdd(mask_inv, img) # patch areas are black
		return sur, spot

	# calculate normalization factor for each small patch area (6*7 in total)
	# para: curSur - image containing only current patch area
	#	others - SAME
	#
	# output: an array with channel being the norm factor for that channel
	#
	def factorCal(curSur, repre_val, nbins):
		factor = 0
		dt = curSur[(curSur != 0).any(axis = (2))]
		if (repre_val == 0):
			repre = repreVal(dt, nbins, -1)
			factor = [255,255,255] / np.array(repre)
		elif (repre_val == 1):
			mean = np.mean(dt, axis = (0))
			factor = [255,255,255] / mean
		elif (repre_val == 2):
			mode = stats.mode(dt, axis = (0)).mode[0]
			factor = [255,255,255] / mode
		else:
			median = np.median(dt, axis = (0))
			factor = [255,255,255] / median
		return factor
			
	# Perform white reference (input not modified?)
	# para: norm - whole chip
	#	patch - current patch
	#	chor - choice of radius. (1-dr)/(otherwise-r)
	#	chov - choice of repre_val
	#	others - SAME
	#
	# output: normalized warp and spot
	#
	def whiteReference(patch, hdd, vdd, r, dr, nbins, chor, chov):
		if (chor == 1):
			rr = dr
		sur, spot = cover(patch, hdd, vdd, rr)
		factor = factorCal(sur, chov, nbins)
		patch = np.clip(factor * patch, 0, 255)
		return patch

	# Perform white patch (two versions) (input modified)
	# para: threshold - threshold on bin count
	#	chovs - choice of version
	#
	# output: 
	#
	def whitePatch(patch, threshold, choa):
		patch = patch.transpose(2, 0, 1)
		brightest = float(2**8)
		if (choa == 1):
			for c in range(0, 3):
				patch[c] = np.minimum(patch[c] * (brightest/float(patch[c].max())),255)
		elif (choa == 2):
			x, y, z = patch.shape
			th = threshold * y * z
			for c in range(0, 3):
				h = np.bincount(patch[c].ravel(), minlength = 256)
				sum = 0
				max = 256
				while (sum < int(th) & max > 1):
					max = max - 1
					sum = sum + h[max]
				patch[c] = np.minimum(patch[c] * (brightest/float(max)),255)
		return patch.transpose(1, 2, 0)

	# Final operation
	rw, cl, hoffset, voffset, hdist, vdist, hdd, vdd, r, dr = para
	norm = np.copy(img)	        # do not change input img
	for i in range(0, rw):          # patch of row i
		for j in range(0, cl):  #          col j
			x = hoffset + j*hdist + (2*j+1)*r # col no.
			y = voffset + i*vdist + (2*i+1)*r # row no.
			patch = norm[y-vdd: y+vdd, x-hdd: x+hdd]
			if (choa == 0):
				nbins, chor, chov = wr
				patch = whiteReference(patch, hdd, vdd, r, dr, nbins, chor, chov)
			elif (choa == 1 or choa == 2):
				patch = whitePatch(patch, threshold, choa) # threshold .1
			norm[y-vdd: y+vdd, x-hdd: x+hdd] = patch
	return norm
