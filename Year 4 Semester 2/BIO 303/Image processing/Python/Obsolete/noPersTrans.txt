#
# @para lg: contour for large square
#       orig: original image
#	 gray: gray scale image
#       sz: length of transformed chip
#       rsz: display fold for show()
# @output: perspective transformed chip area
#          length of the chip
#

def nonPersTrans(lg, orig, gray, sz, rsz):

	def show(img, fold):
		rszimg = cv2.resize(img, None, fx = fold, fy = fold)
		cv2.imshow('img', rszimg)

	def slope(p1, p2):
		return (p1[1] - p2[1]) / (p1[0] - p2[0])

	def distance(p1, p2):
		return np.sqrt(((p1[0] - p2[0])**2) + ((p1[1] - p2[1])**2))

	def divide(n1, n2):
		precise = n1 / n2
		round = n1 // n2
		if (precise - round > round + 1 - precise):
			return int(round + 1)
		return int(round)

	def order_points(pts):
		# sort the points based on their x-coordinates
		xSorted = pts[np.argsort(pts[:, 0]), :]
 
		# grab the left-most and right-most points from the sorted
		# x-roodinate points
		leftMost = xSorted[:2, :]
		p2 = xSorted[2:3,:][0]
		p3 = xSorted[3:,:][0]
	 
		# now, sort the left-most coordinates according to their
		# y-coordinates so we can grab the top-left and bottom-left
		# points, respectively
		leftMost = leftMost[np.argsort(leftMost[:, 1]), :]
		(tl, bl) = leftMost
 	
		# now that we have the top-left coordinate, use it as an
		# anchor to calculate the angle between a vertical line
		# and lines between respestively tl and two left points
		s2 = slope(tl, p2)
		s3 = slope(tl, p3)
		if (s2 < s3):
			tr = p2
			br = p3
		else:
			tr = p3
			br = p2
 
		# return the coordinates in top-left, top-right,
		# bottom-right, and bottom-left order
		return np.array([tl, tr, br, bl], dtype="float32")

	# process corners found - return array
	def arrmk(approj):
		a = np.zeros(shape = (len(approj), 2), dtype = 'int32')
		for i in range(0, len(approj)):
			   a[i] = approj[i][0]
		#a = a.reshape((-1,1,2))
		return a

	# find corner from contour
	def apprf(maj):
		epsilon = 0.05*cv2.arcLength(maj,True)
		approj = cv2.approxPolyDP(maj,epsilon,True)
		a = arrmk(approj)
		cv2.polylines(hold,[a],True,(255,255,255))
		show(hold, rsz)    #draw contour from found corners
		return a

	# return the transformed chip
	hold = np.zeros_like(gray)
	crlg = apprf(lg)                  # find corner of large square contour
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	orcrlg = order_points(crlg)

	d1 = distance(orcrlg[0], orcrlg[1])     # calculate length of transformed chip
	d2 = distance(orcrlg[1], orcrlg[2])
	d3 = distance(orcrlg[2], orcrlg[3])
	d4 = distance(orcrlg[3], orcrlg[0])
	# length = divide(d1 + d2 + d3 + d4, 420) -- use this if write out img
	#fold = divide((d1 + d2 + d3 + d4) / 4, 420)
	#length = fold * 420
	length = 420
	dst = np.array([[0, 0], [length, 0], [length, length], [0, length]], dtype = 'float32')
	M = cv2.getPerspectiveTransform(orcrlg, dst)
	warped = cv2.warpPerspective(orig, M, (length, length))
	show(warped, 1)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	return warped