# locate spot area from the chip and mask or manifest them
# para: warpHSV - perspectively transformed chip in HSV space
#	warp - perspectively transformed chip in space as desired
#	fold - edge length of warped / 420
# 	rsz - display fold
# 	rw * cl chip
# 	rst - horizontal distance between left edge and rightmost point of 
#            larger circle surrounding the first spot
# 	cst - vertical distance ...
# 	cext - vertical distance between two surrounding circles in a column
# 	lr - radis of surrounding circle of spot
# 	sr - radius of spot
#	th - threshold for spot size adjustment
#
# output: spotF - image where precisely spots are maintained, others areas black
#	  surF - image where precisely spots are black, other areas maintained
#

def spotEx(warpHSV, warp, fold, rsz, rw, cl, rst, cst, cext, lr, sr, th):

	# black-out areas other than spots
	# para: mask - blank image same size as warped, drawing panel
	#	fold - edge length of warped / 420
	#	same as for that for whole function
	# output: mask - blank image where spot areas being white
	#
	def maskD(mask, fold, rsz, rw, cl, rst, cst, cext, lr, sr):
		d = lr * fold
		r = sr * fold
		for i in range(0, rw):
			for j in range(0, cl):
				cv2.circle(mask, (rst + (2*j+1)*d, cst + (2*i+1)*d + i * cext), r, (255, 255, 255), -1)
		show(mask, rsz)
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return
		return mask

	# find the average s-value of the panel area of the chip
	# para: 
	#
	# output:
	#
	#
	def threshold(mergeS):
		return np.mean(mergeS)
		

	# adjust area of the spot with given center - Nov 25
	# para: center - coordinate of current spot center
	#	sr - radius of circle in mask
	#	th - threshold that differentiate panel from spot
	#
	# output: mersk - adjusted mersk for spot with given center
	#
	def square(mersk, mergeS, merge, center, sr, th):
		for i in range(center[0] - sr, center[0] + sr):
			for j in range(center[1] - sr, center[1] + sr):
				if((merge[i, j] == [255, 255, 255]).all() or mergeS[i, j] > th):
					continue
				mersk[i, j] = [255, 255, 255]
		return mersk

	# adjust spot area case by case - Nov 25
	# para: mersk - the mask used to generate merge (warp + mersk = merge)
	#	mergeS - s channel of merge
	#	merge - ...
	#	REST - same as above
	#
	# output: mersk - adjusted mersk for all spots
	#
	def adjust(mersk, mergeS, merge, fold, rw, cl, rst, cst, cext, lr, sr, th):
		d = lr * fold
		r = sr * fold
		for i in range(0, rw):          # spot in row i
			for j in range(0, cl):  #         col j
				center = [cst + (2*i+1)*d + i * cext, rst + (2*j+1)*d]
				mersk = square(mersk, mergeS, merge, center, sr, th)
		return mersk	
	
	# mask spot with larger than needed mask
	# para: SAME
	#
	# output: maskR - spots in which are larger than real spot, guaranteed to contain real spot 
	#	  spotR - spot guaranteed to be maintained, other areas are white
	#
	def roughProcess(warped, fold, rsz, rw, cl, rst, cst, cext, lr, sr):
		maskR = np.zeros_like(warped)
		maskR_inv = maskD(maskR, fold, rsz, rw, cl, rst, cst, cext, lr, sr) # spots white
		maskR = cv2.bitwise_not(maskR_inv)
		surR = cv2.add(maskR_inv, warped) # spot areas are guaranteed to be white	
		spotR = cv2.add(maskR, warped)    # spot guaranteed to be left, other areas white
		return maskR, spotR


	maskR, spotR  = roughProcess(warpHSV, fold, rsz, rw, cl, rst, cst, cext, lr, sr)
	h, s, v = cv2.split(spotR)
	maskF = adjust(maskR, s, spotR, fold, rw, cl, rst, cst, cext, lr, sr, th)
	maskF_inv = cv2.bitwise_not(maskF)    # precisely only spot areas are white, other areas black

	warp_inv = cv2.bitwise_not(warp)
	spotF_inv = cv2.add(maskF, warp_inv)
	spotF = cv2.bitwise_not(spotF_inv)    # precisely spots are maintained, others black
	show(spotF, rsz)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return

	surF_inv = cv2.add(maskF_inv, warp_inv)
	surF = cv2.bitwise_not(surF_inv)      # precisely spots are black, others maintained
	show(surF, rsz)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return

	return spotF, surF