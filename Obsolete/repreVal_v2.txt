# deciding the most representative vals of the given data set - updated on Jan 12 2019
# para: dt - original data for either spot/surround
#	nbins - number of bins to generate the histogram
# 	id - index of spot/surround to be evaluated
#	findMax - if == 1, use mode to disclose the most frequent val
#		  otherwise use mini to disclose the least ...
#
# output: cx - mode value for channel x
#

def repreVal(dt, nbins, id, findMax):

	# check whether a is beyond [lo,hi]
	def beyond(a, lo, hi):
		return (a < lo or a > hi)		

	# create new dt useing only pixels from the most dense area - update on Dec 12
	# para: dt - numpy array of data
	#	id - != -1 only when used on original dt, where 1 of the spots/surs are selected
	#	a - lower bound for selected channel
	#	b - upper...
	#
	# output: res - new array contain only values of pixels for the most dense area
	#
	def newDT(dt, id, a, b):
		res = []
		st = 0
		if (id != -1):
			dt = dt[id]
		for i in range(0, len(dt)):
			if (beyond(dt[i], a, b)):
				continue
			res.append(dt[i])
		return np.array(res)

	# use histogram to locate area with mode color value
	# para: dt - numpy array of data
	#	nbins - number of bins to create 3D histogram
	#	id - SAME as above
	#
	# output: (x,x) - lower and upper bound for the specific channel
	#	  max - number of pixels within range defined by (x,x)..
	#
	def mode(dt, nbins, id):
		if (id != -1):
			dt = dt[id]
		H, edges = np.histogram(dt, bins = nbins)
		x = 0
		max = 0
		for i in range(0, nbins):
			if (H[i] == 0 or H[i] < max):
				continue
			x = i
			max = H[i]
		return edges[x], edges[x+1], max
	
	# use histogram to locate area with mode color value
	# para: dt - numpy array of data
	#	nbins - number of bins to create 3D histogram
	#	id - SAME as above
	#
	# output: (x,x) - lower and upper bound for the specific channel
	#	  max - number of pixels within range defined by (x,x)..
	#
	def mini(dt, nbins, id):
		if (id != -1):
			dt = dt[id]
		H, edges = np.histogram(dt, bins = nbins)
		x = 0
		min = float('inf')
		for i in range(0, nbins):
			if (H[i] == 0 or H[i] > min):
				continue
			x = i
			min = H[i]
		return edges[x], edges[x+1], min

	# narrow down the range to one value
	# para: SAME as above
	#
	# output: narrowest range for each channel
	#		
	def normVal(a, b, res, findMax):
		if (findMax):
			a, b, max = mode(res, 10, -1)
			if ((b-a) <= 1):
				return a, b
			res = newDT(res, -1, a, b)
		else:
			a, b, min = mini(res, 10, -1)
			if ((b-a) <= 1):
				return a, b
			res = newDT(res, -1, a, b)
		return normVal(a, b, res, findMax)

	# operation on original dt
	if (findMax):
		a, b, max = mode(dt, nbins, id)
		res = newDT(dt, id, a, b)
	else:
		a, b, min = mini(dt, nbins, id)
		res = newDT(dt, id, a, b)
	
	# narrow down from range to one value
	a, b = normVal(a, b, res, findMax)
	c1 = (int) ((a+b) // 2)
	
	return c1