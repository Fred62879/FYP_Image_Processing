#
# para: op - output directory
#       ip - input directory
#	fold - img display fold
#       threshold - set-up value for image thresholding
# output: none (img written to op)
#
#

def writeoutImg(op, ip, fold, threshold):

	# display resized image
	def show(img, fold):
		rsz = cv2.resize(img, None, fx = fold, fy = fold)
		cv2.imshow('img', rsz)

	# read in the image
	# para: name - name of the image, e.g. 'xxx.jpg'
	#	thre - set-up threshold for the thresholding
	#	i - index (counting from the last) of the contour to be extracted from the list of
	#	    sorted contours with increasing contour area, e.g. i = 1 gives the largest/last contour
	#	fold - display fold
	#
	# output: c1 - the target contour, e.g. of the chip area
	#	  gray - gray scale image of orig
	#	  orig - original image read in
	#	  mask1 - a black image where only areas enclosed by c1 is white
	#
	def readin(name, thre, i, fold):
		orig = cv2.imread(name)
		gray = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)
		ret, thresh = cv2.threshold(gray, thre, 255, 0)	
		show(thresh, fold)
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return
		tinv = cv2.bitwise_not(thresh)

		image, contours, hierarchy = cv2.findContours(tinv,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
		cst = sorted(contours, key = lambda x: cv2.contourArea(x))
		c1 = cst[len(cst) - i]
		mask1 = np.zeros_like(gray)
		mask1 = cv2.drawContours(mask1, [c1], -1, (255, 255, 255), -1)
		show(mask1, fold)
		if cv2.waitKey(0) & 0xFF == ord('l'):     # if current contour larger than chip
			return readin(name, thre, i + 1, fold)
	
		elif cv2.waitKey(0) & 0xFF == ord('s'):   # if current contour smaller than chip
			return readin(name, thre, i - 1, fold)

		elif cv2.waitKey(0) & 0xFF == ord('a'):   # abandon
			return

		else:
			return c1, gray, orig, mask1

	# fill the extra areas black for image with border length < mx
	# to make all images of size mx * mx
	def imgbd(res, mx):
		rescp = []
		for i in range(0, len(res)):
			n = cv2.copyMakeBorder(res[i], mx - res[i].shape[0], 0, mx - res[i].shape[0], 0, 0)
			rescp.append(n)
		return rescp

	# load all images using the directories specified
	# para: imgin - a list of directories where images should be loaded
	#
	# output: images - a list of image object loaded
	#
	def loadImg(imgin):
		images = []
		#for filename in os.listdir(folder):
		#	img = cv2.imread(os.path.join(folder,filename))
		for i in range(0, len(imgin)):
			img = cv2.imread(imgin[i])
			if img is not None:
				images.append(img)
		return images

	# name input and output image
	# para: ip - input directory
	#	op - output directory
	#
	# output: imgin - a list of directories where images should be loaded
	#	  imgout - a list of directories where images should be written
	#
	def name(ip, op):
		imgin = []
		imgout = []
		for filename in os.listdir(ip):
			imgin.append(os.path.join(ip, filename))
			imgout.append(os.path.join(op, filename))
		return imgin, imgout

	imgin, imgout = name(ip, op)
	images = loadImg(imgin)
	mx = 0
	res = []
	for i in range(0, len(images)):
		# lg, gray, orig = readin(imgin[i], threshold, 2)
		# warp = nonPersTrans(lg, orig, gray, sz, 0.2)    # should add sz para - length of transformed chip
		chipct, gray, orig, chip = readin(imgin[i], 100, 2, fold)
		warp = persTransU(chipct, orig, gray, fold, chip)
		res.append(warp)             # all transformed images
		if (mx < warp.shape[0]):    
			mx = warp.shape[0]   # find maximum length of image
	#res = imgbd(res, mx)	             # convert to bordered image
	os.getcwd()
	for i in range(0, len(res)):
		cv2.imwrite(imgout[i], res[i])