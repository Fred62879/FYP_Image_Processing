# Compensate for non-uniform lighting distribution on chip
# para: light_adjust - 1, white patch; 2, grey world; 3, reference chart
#	repre_val - 0, histogram squeezing; 1, mean; 2, mode; 3 median
#	process - processed image of the chip
#	spot - image where areas exlucing spot (patch) are black, spots normal.
#	sur -  image where only spots are black, other areas normal
#	rw * cl chip
#	h/v_offset - horizontal/vertical distance between left/top_most point of 
#		     the top-left spot and the left/top inner chip edge
#	h/v_dist - horizontal/vertical distance between two spots
#	h/v_dd - half of horizontal/vertical edge length of rectangle extracted
#	r - radius of spot
#	nbins - # of bins to do histogram shrinkage, used when repre_val == 0
#
# output: cpNorm - copy of "process" that is lighting normalized
#	  spotNorm - cpNorm where areas other than spots are black
#	  spotDt - an array of spot data
#

def lightAdjust(light_adjust, repre_val, process, spot, sur, rw, cl, hoffset, voffset, hdist, vdist, r, hdd, vdd, nbins):

	# Perform gray world algorithm on the whole image
	# para: 
	#
	# output: 
	#
	def grayWorld(process):
		cpNorm = np.copy(process)
		r, g, b = cv2.split(cpNorm)
		mr = np.mean(r)
		mg = np.mean(g)
		mb = np.mean(b)
		gray = (mr+mg+mb)/3
		factor = gray/[mr,mg,mb]
		return cpNorm * factor

	# calculate normalization factor for each small patch area (6*7 in total)
	# para: curSur - image containing only current patch area
	#	others - SAME
	#
	# output: an array with channel being the norm factor for that channel
	#
	def factorCal(curSur, repre_val, nbins):
		factor = 0
		dt = curSur[(curSur != 0).any(axis = (2))]
		if (repre_val == 0):
			repre = repreVal(dt, nbins, -1)
			factor = [255,255,255] / np.array(repre)
		elif (repre_val == 1):
			mean = np.mean(dt, axis = (0))
			factor = [255,255,255] / mean
		elif (repre_val == 2):
			mode = stats.mode(dt, axis = (0)).mode[0]
			factor = [255,255,255] / mode
		else:
			median = np.median(dt, axis = (0))
			factor = [255,255,255] / median
		return factor

	# exclude 0 from collected data
	# para: dt - list of data for either 42 spots or sur blocks
	# output: list of data excluding zero
	#
	def noZero(dt):
		res = []
		for i in range(0, len(dt)): # for each spot/sur
			cur = dt[i]
			cur = cur[(cur != 0).any(axis = (2))]
			res.append(cur)
		return res
			
	# normalize warp and spot (do not modify input)
	# para: cp - copy of processed chip image
	#	others - SAME
	#
	# output: normalized warp and spot
	#
	def whiteReference(process, spot, sur, repre_val, rw, cl, hoffset, voffset, hdist, vdist, r, hdd, vdd, nbins):
		res = []
		spotNorm = np.copy(spot)
		cpNorm = np.copy(process)  # manipulate on copies
		for i in range(0, rw):
			for j in range(0, cl):
				x = hoffset + j*hdist + (2*j+1)*r
				y = voffset + i*vdist + (2*i+1)*r
				# find normalization factor
				curSur = sur[y-vdd: y+vdd, x-hdd: x+hdd]
				factor = factorCal(curSur, repre_val, nbins)
				# normalize
				cpNorm[y-vdd: y+vdd, x-hdd: x+hdd] = np.clip(factor * cpNorm[y-vdd: y+vdd, x-hdd: x+hdd], 0, 255)
				spotNorm[y-vdd: y+vdd, x-hdd: x+hdd] = np.clip(factor * spotNorm[y-vdd: y+vdd, x-hdd: x+hdd], 0, 255)
				res.append(spotNorm[y-vdd: y+vdd, x-hdd: x+hdd])
		return cpNorm, spotNorm, noZero(np.array(res))

	#
	#
	#
	#
	#
	def whitePatch(version, process):
		res = np.zeros_like(process)
		double = np.array(process, dtype = 'f')
		if (version == 0):
			for i in range(0, 3):
				curmax = np.max(process[:,:,i])
				factor = 255/
				res[:,:,i] = double[:,:,i] / curmax
		else:
			total = .1 * process.shape[0] * process.shape[1]
		return res
	#
	if (light_adjust == 1):
		cpNorm, spotNorm, dt = whiteReference(process, spot, sur, repre_val, rw, cl, hoffset, voffset, hdist, vdist, r, hdd, vdd, nbins)
	elif (light_adjust == 2):
		return grayWorld(process)

	#cv2.imwrite('warp.jpg', process)
	#cv2.imwrite('norm.jpg',norm)
	return cpNorm, spotNorm, dt