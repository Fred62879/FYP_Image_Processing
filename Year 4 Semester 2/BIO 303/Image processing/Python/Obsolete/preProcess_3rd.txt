# preProcess image normalize L channel - created on Dec 26 2018
# para: orig - original image read in
#	ninv - # of intervals to divide orig for normalization
#	nbin - # of bins to draw 3D histogram to disclose the representative
#		value of each block defined by given
#	fold - display fold 
#
# output:
#

def preProcess(orig, lab, ninv, nbins, fold):

	# cast 3D np array (image) to 2D via merging all rows
	# para: imgP - image to be processed
	#
	# output: 2D data for imgP
	#
	def decreaseDim(imgP):
		r, c, ch = imgP.shape
		res = []
		for i in range(0, r):
			for j in range(0, c):
				res.append(imgP[i,j,:][0])
		return np.array(res)

	# blur image to reflect lighting distribution
	# para: imgCp - copy of the image to be blurred
	#	ninv - # of intervals to divide orig for blur
	#	nbins - # of bins to draw 3D histogram to disclose the representative
	#		value of each block defined by given
	#	fill - if 0, only calculate representative value
	#	       if 1, calculate and fill, generate 
	#
	# output: 1). if (fill == 1), return blurred image composed of ninv*ninv blocks
	#	      within each, all pixels share the same value (representative value 
	#	      of that block)
	#	  2). if (fill == 0), return representative value
	#
	def blur(imgCp, ninv, nbins):
		rw, cl, ch = imgCp.shape
		for i in range(0, ninv):
			for j in range(0, ninv):
				vd = (rw // (2*ninv))
				hd = (cl // (2*ninv))
				x = (2*j + 1) * hd
				y = (2*i + 1) * vd
				dt = decreaseDim(imgCp[y-vd:y+vd, x-hd:x+hd])
				curL = repreVal(dt, nbins, -1)
				imgCp[y-vd:y+vd, x-hd:x+hd][:,:,:] = curL
		return imgCp

	# normalize image for non-uniform lighting
	# para: imgCp - copy of image to be normalized
	#	normVal - np array of three values, being norm factor for R,G,B
	#	blr - blurred image defined above
	#	ninv - SAME AS ABOVE
	#
	# output: normalized image composed of ninv*ninv blocks within each, all pixels
	#	  are normalized to the given normVal
	#
	def normalize(imgCp, normVal, blr, ninv, fold):
		rw, cl, ch = imgCp.shape
		for i in range(0, ninv):
			for j in range(0, ninv):
				vd = (rw // (2*ninv))
				hd = (cl // (2*ninv))
				x = (2*j + 1) * hd
				y = (2*i + 1) * vd
				curVal = np.array(blr[y, x][:,:0])
				factor = normVal / curVal
				imgCp[y-vd:y+vd, x-hd:x+hd][:,:0] = imgCp[y-vd:y+vd, x-hd:x+hd][:,:,0] * factor
		show(imgCp, fold)
		return imgCp
	

	# obtain repre L val for the whole image
	dt = decreaseDim(lab)   # L channel value of lab
	H, edges = np.histogram(dt, bins = nbins)
	normVal = repreVal(dt, nbins, -1, 0)

	copy = np.copy(lab)
	blr = blur(copy, ninv, nbins)
	show(blr, fold)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	
	copy = np.copy(lab)
	norm = normalize(copy, normVal, blr, ninv, fold)
	show(norm, fold)
	
	return blr, norm