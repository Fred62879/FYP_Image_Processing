# 
# para: light_adjust - 
#	spot - 
#	sur - 
#	spotDt - 
#	surDt - 
#	process - 
#	repre_val - 0, histogram squeezing; 1, mean; 2, mode; 3 median
#
# output:
#
#

def lightAdjust(light_adjust, spot, sur, spotDt, surDt, process):

	# 
	# para: 
	#
	# output: 
	#
	def grayWorld(process):
		r, g, b = cv2.split(process)
		mr = np.mean(r)
		mg = np.mean(g)
		mb = np.mean(b)
		gray = (mr+mg+mb)/3
		factor = gray/[mr,mg,mb]
		return process * factor

	# calculate normalization factor for each small patch area (6*7 in total)
	# para: curSur - image containing only current patch area
	#	others - SAME
	#
	# output: an array with channel being the norm factor for that channel
	#
	def factorCal(curSur, repre_val, nbins):
		factor = 0
		dt = curSur[(curSur != 0).any(axis = (2))]
		if (repre_val == 0):
			repre = repreVal(dt, nbins, -1)
			factor = [255,255,255] / np.array(repre)
		elif (repre_val == 1):
			mean = np.mean(dt, axis = (0))
			factor = [255,255,255] / mean
		elif (repre_val == 2):
			mode = stats.mode(dt, axis = (0)).mode[0]
			factor = [255,255,255] / mode
		else:
			median = np.median(dt, axis = (0))
			factor = [255,255,255] / median
		return factor

	# prevent overflow of summation
	# para: a/b - two values or arrays to be added
	#
	# output: normal summation, if value exceeds 255, then set as 255.
	#
	def multiOverflow(a, b):
		b = 255 - b
		np.putmask(a, b < a, b)
		a += 255 - b
		return a
			
	# normalize warp and 
	# para: warp - copy of transformed chip image
	#	spot - image where areas exlucing spot (patch) are black, spots normal.
	#	sur -  image where only spots are black, other areas normal
	#	others - SAME
	#
	# output: 
	#
	def whitePatch(warp, spot, sur, repre_val, rw, cl, rst, cst, hd, vd, r, hdd, vdd, nbins):
		spotNorm = np.copy(spot)
		warpNorm = np.copy(warp)
		for i in range(0, rw):
			for j in range(0, cl):
				x = rst + j*hd + (2*j+1)*r
				y = cst + i*vd + (2*i+1)*r
				# find normalization factor
				curSur = sur[y-vdd: y+vdd, x-hdd: x+hdd]
				factor = factorCal(curSur, repre_val, nbins)
				# normalize
				#spot = multiOverflow(spot, (spot * (factor-1).astype('uint8')))
				#warp = multiOverflow(warp, (warp * (factor-1).astype('uint8')))				
				#spot = multiOverflow(np.zeros_like(spot), (spot*factor).astype('uint8'))
				#warp = multiOverflow(np.zeros_like(warp), (warp*factor).astype('uint8'))
				#warpNorm[y-vdd: y+vdd, x-hdd: x+hdd] = factor * warpNorm[y-vdd: y+vdd, x-hdd: x+hdd]
				#spotNorm[y-vdd: y+vdd, x-hdd: x+hdd] = factor * spotNorm[y-vdd: y+vdd, x-hdd: x+hdd]
				show(warpNorm, 1)
		return warpNorm, spotNorm

	def histogramShrink(process):
		