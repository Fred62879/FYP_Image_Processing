#
# para: warp - chip image in RGB space
#	flag - exact colorspace to be used, if 0, then maintain RGB
#	nbins - number of bins for 2D histogram
# 	rw * cl chip
# 	rst - horizontal distance between left edge and rightmost point of 
#            larger circle surrounding the first spot
# 	cst - vertical distance ...
# 	cext - vertical distance between two surrounding circles in a column
# 	lr - radis of surrounding circle of spot
# 	sr - radius of spot
#	th - $$$$TEMPORARY$$$$, threshold for precise spot detection
#	xStr - e.g. 'R'
#
# output: NONE
#
	
def scatterSpot(warp, flag, nbins, rw, cl, rst, cst, cext, lr, sr, th, aStr, bStr, cStr, title):

	#
	# para:
	#
	# output:
	#
	def lgDen(h):
		r = 0
		c = 0
		max = 0
		for i in range(0, h.shape[0]):
			for j in range(0, h.shape[1]):
				if (h[i, j] == 0 or h[i, j] < max):
					continue
				max = h[i, j]
				r = i
				c = j
		return r, c

	# retrieve representative intensity value for each spot
	# para: a - x dimension data type (R/G/B...)
	#	b - y dimension data type
	#	xd - collection of x coordinate of all spots
	#	yd - collection of y coordinate of all spots
	#	nbins - number of bins for 2D histogram
	#
	# output: ...
	#
	def dataColec(a, b, xd, yd, nbins):
		h, xedge, yedge, img = plt.hist2d(a, b, bins=nbins, norm=colors.LogNorm())
		plt.xlim([0,255])
		plt.ylim([0,255])
		r, c = lgDen(h)
		x = xedge[r]
		y = yedge[c]
		xd.append(x)
		yd.append(y)
		plt.clf()
		return xd, yd

	#
	# para: id - 
	#
	# output:
	#
	def data(dt, nbins, id):
		xd = []
		yd = []
		for i in range(0, len(dt)):
			a, b, c = dt[i][:,0], dt[i][:,1], dt[i][:,2]
			if (id == 1):
				xd, yd = dataColec(a, b, xd, yd, nbins)
			elif (id == 2):
				xd, yd = dataColec(a, c, xd, yd, nbins)
			else:
				xd, yd = dataColec(b, c, xd, yd, nbins)
		return xd, yd


	def draw(title, label, xd, yd, xlabel, ylabel):
		plt.subplots_adjust(bottom = 0.1)
		plt.scatter(xd, yd)
		plt.title(title)
		plt.xlabel(xlabel)
		plt.ylabel(ylabel)
		for i in range(0, len(label)):
			plt.annotate(label[i], (xd[i], yd[i]))
		plt.show()


	# if (flag != '0'):
	warp = cv2.cvtColor(warp, flag)
	spotdt, surdt = intenExtract(warp, 1, 1, rw, cl, rst, cst, cext, lr, sr, th)
	label = list(range(rw * cl))

	xd, yd = data(spotdt, 10, 1)
	draw(title, label, xd, yd, aStr, bStr)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	
	xd, yd = data(spotdt, 10, 2)
	draw(title, label, xd, yd, aStr, cStr)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return

	xd, yd = data(spotdt, 10, 3)
	draw(title, label, xd, yd, bStr, cStr)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
