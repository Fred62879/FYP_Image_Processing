# Mar 31 2019 update
# Folder name changed
# ..._n -> ..._c (stores cropped chip)
# ..._wp -> ..._nwp1 (stores normalized chip using wp1) (same applies to other algr)

# designed for version 2 benchmarking
# Images under this directory are all sotred in the way that
# those of the same light (6 chips * 2 time points)
# are placed in one folder (e.g. light1/2/3)


**** Process ****
# Apr 2
# v1 arrangement_for distance calculation
# v2 rearrangement_for other two measures
def crop(ip, op):
	error = []
	for folder in os.listdir(ip): # either chipid (v1) or light (v2)
		curin = os.path.join(ip, folder)
		curout = os.path.join(op, folder)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)
			try:
				orig, gray, inner, chip, warp, restr = process(inname, 100, .01, .01)
			except:
				error.append(inname)
				cv2.imwrite(outname, np.zeros(shape = (1, 1)))
				continue
			cv2.imwrite(outname, restr)
	return error


**** Distance ****
def collect(curDir, curt1, curt2, nl):
	count = 0
	for filename in os.listdir(curDir):
		img = cv2.imread(os.path.join(curDir, filename))
		if ((count < nl) & (img is not None) & (img.shape != (1,1,3))):
			curt1.append(img)
		elif ((count >= nl) & (img is not None) & (img.shape != (1,1,3))):
			curt2.append(img)
		count = count + 1

def cal(curt, curDist, allDist):
	if (len(curt) <= 1):
		return
	for i in range(1, len(curt)):
		curDist.append(np.sum((curt[i]-curt[0])**2))
	allDist.append(curDist)

def distanceAll(root, nl):
	allDist = []
	curt1 = []
	curt2 = []
	for dirs in os.listdir(root):
		del curt1[:]
		del curt2[:]
		collect(os.path.join(root, dirs), curt1, curt2, nl)		
		cal(curt1, [], allDist)
		cal(curt2, [], allDist)
	return allDist

# test
a = np.array([[[[1,2,3],[1,2,2]],[[1,5,4],[3,6,2]]],[[[2,5,3],[3,2,1]],[[2,4,5],[3,4,6]]]])
b = a - 1
np.sum((b-a)**2)


**** Histogram ****
// stick to v3, draw and output histogram for verification


**** Normalize and export ****
// write out norm img & RGB value for each block
// whole chip data is calculated and outputed in next section

# para: choa - choice of algorithm for normalization
#	thre & stadrd - refer to lightadjust_v5
#	shape - block shape (60, 70, 3)
#
def normCollect(ip, op, para, choa, thre, stadrd, shape):
	pdt = []	# patch RGB for imgs under all lights using choa\th algr
	sdt = []	# spot...
	for light in os.listdir(ip):  # light conditions
		clpdt = []	      # patch RGB for all imgs under cur_light...
		clsdt = []	      # spot...
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin): # imgs under current light
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)

			img = cv2.imread(inname)
			if (img.shape == (1,1,3)):
				cv2.imwrite(outname, img)
				clpdt.append(np.full(shape, -1))
				clsdt.append(np.full(shape, -1))
				continue
			norm, clcipdt, clcisdt = lightAdjust(img, para, choa, thre, stadrd) # v5
			cv2.imwrite(outname, norm)
			# collect RGB value
			clpdt.append(clcipdt) # append RGB of all patches of cur img
			clsdt.append(clcisdt)
		pdt.append(np.array(clpdt))
		sdt.append(np.array(clsdt))
	return np.array(pdt), np.array(sdt)


# pdt[0] - Under light1
# pdt[0][0] - 1st img
# pdt[0][0][0] - 1st block
# pdt[0][0][0][0] - R value
# test refer to Mar 31

// wrout given chip data
# op modified, reinitialize each wrout
def wroutPS(dt, op):
	nlght, nimg, nbk, nch = dt.shape
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, nlght):                # light i
			for j in range(0, nimg):         # img j
				for k in range(0, nbk): # block k
					b = writer.writerow(dt[i][j][k])
def wrout(p, s, algr, nm, op):
	wroutPS(p, op + algr + nm[0])
	wroutPS(s, op + algr + nm[1])

# test refer to Mar 31

// integrate with img-wise_Apr 1 2019
# v2_common use of collect
def blockWise(inname, outname, normKit, clpdt, clsdt):
	choa, thre, stadrd, shape = normKit
	img = cv2.imread(inname)
	if (img.shape == (1,1,3)):
		cv2.imwrite(outname, img)
		clpdt.append(np.full(shape, -1))
		clsdt.append(np.full(shape, -1))
		continue
	norm, clcipdt, clcisdt = lightAdjust(img, para, choa, thre, stadrd) # v5
	cv2.imwrite(outname, norm)
	return clpdt, clsdt, clcipdt, clcisdt

def collect(ip, op, para, normKit, wise):
	pdt = []	# patch RGB for imgs under all lights using choa\th algr
	sdt = []	# spot...
	for light in os.listdir(ip):  # light conditions
		clpdt = []	      # patch RGB for all imgs under cur_light...
		clsdt = []	      # spot...
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin): # imgs under current light
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)

			if (wise == 1):
				clpdt, clsdt, clcipdt, clcisdt = blockWise(inname, outname, normKit, clpdt, clsdt)
			elif (wise == 2):
				
				
			# collect RGB value
			clpdt.append(clcipdt) # append RGB of all patches of cur img
			clsdt.append(clcisdt)
		pdt.append(np.array(clpdt))
		sdt.append(np.array(clsdt))
	return np.array(pdt), np.array(sdt)
// not tested

**** Data output_img-wise ****
// obtain RGB value for spots of selected grouping (curlb) in img
# collect spot dt based on color group
def spotGpPeak(img, para, label, curlb):
	rw, cl, hoffset, voffset, hdist, vdist, hdd, vdd, r, dr = para
	cimg = np.copy(img)
	# mask blocks whose spot not in current color group (curlb)
	for i in range(0, rw):
		for j in range(0, cl):
			id = i * cl + j
			x = hoffset + j*hdist + (2*j+1)*r # col no.
			y = voffset + i*vdist + (2*i+1)*r # row no.
			if (label[id] != curlb):
				cimg[y-vdd: y+vdd, x-hdd: x+hdd] = 0
	# show(cimg, 1)
	x, y, z = cimg.shape
	dt = np.reshape(cimg, (x*y, z))
	# remove pixels if being 0 in any channel
	dt = dt[(dt != 0).all(axis = (1))]
	cisdt = []
	cihist = []
	for ch in range(0, 3):
		hist, pc, sc = histogram(dt, 1, ch, 0, 0, '', 1, 0, 1) # peak
		cisdt.append(sc)
		cihist.append(hist)
	# return dt, np.array(cisdt), np.array(cihist)
	return np.array(cisdt)

# test refer to Mar 31 & Apr 1

def collectImgWise(ip, label, nimg, nlb):
	pdt = []	# white area RGB for imgs under all lights using choa\th algr
	sdt = []	# spot area
	ltct = -1	# cur light id
	for light in os.listdir(ip):  # light conditions
		clpdt = []	      # white area RGB for all imgs under cur_light...
		clsdt = []	      # spot...
		ltct = ltct + 1	      # increment cur light id
		imgct = -1	      # cur img id

		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):  # imgs under current light
			imgct = imgct + 1	 # increment cur img id
			id = nimg * ltct + imgct # cal cur img overall id
			
			inname = os.path.join(curin, imgnm)
			img = cv2.imread(inname)
			
			x, y, z = img.shape
			if ((x,y,z) == (1,1,3)):
				clpdt.append(np.array([-1, -1, -1]))
				clsdt.append(np.full((3, 3), np.array([-1, -1, -1])))
				continue
			dt = np.reshape(img, (x*y, z))
			clcipdt = []
			clcisdt = []

			# white area value
			for ch in range(0, 3): # R/G/B channel
				hist, bins = np.histogram(dt[:, ch], 256, [0, 256])
				mx = max(hist)
				intenw = 0
				for i in range(0, 255):
					if (hist[i] == mx):
						intenw = i
				clcipdt.append(intenw)

			# spot area value
			for lb in range(1, nlb + 1):
				ciclbsdt = spotGpPeak(img, para, label[id], lb)
				clcisdt.append(ciclbsdt)

			# collect RGB value
			clpdt.append(np.array(clcipdt)) # append RGB of white areas of cur img
			clsdt.append(np.array(clcisdt)) # ... spot areas ...
		pdt.append(np.array(clpdt))
		sdt.append(np.array(clsdt))
	return np.array(pdt), np.array(sdt)

# pdt[0] - Under light1
# pdt[0][0] - 1st img
# pdt[0][0] - R value

# sdt[0] - Under light1
# sdt[0][0] - 1st img
# sdt[0][0][0] - label 1
# sdt[0][0][0][0] - R value

# 2nd version
# each img has 1+nlb RGB, one for patch, the others for spots of nlb# labels
def collectImgWise(ip, label, nimg, nlb):
	dt = []		# white/spot area RGB for imgs under all lights using choa\th algr
	ltct = -1	# cur light id
	for light in os.listdir(ip):  # light conditions
		cldt = []	      # white/spot area RGB for all imgs under cur_light...
		ltct = ltct + 1	      # increment cur light id
		imgct = -1	      # cur img id
		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):  # imgs under current light
			imgct = imgct + 1	 # increment cur img id
			id = nimg * ltct + imgct # cal cur img overall id
			img = cv2.imread(os.path.join(curin, imgnm))
			x, y, z = img.shape

			# I) unhandled img
			clcipsdt = []
			if ((x,y,z) == (1,1,3)):
				for i in range(0, 1 + nlb): # one patch and nlb# labels
					clcipsdt.append(np.array([-1, -1, -1]))
				cldt.append(np.array(clcipsdt))
				continue

			# II) handled image
			# i) white area value
			clcipsdt = [] # patch & spot RGB value of cur img
			clcipdt = []  # collect individually R/G/B of cur patch
			histdt = np.reshape(img, (x*y, z))
			for ch in range(0, 3): # R/G/B channel
				hist, bins = np.histogram(histdt[:, ch], 256, [0, 256])
				mx = max(hist)
				intenw = 0
				for i in range(0, 255):
					if (hist[i] == mx):
						intenw = i
				clcipdt.append(intenw)
			clcipsdt.append(np.array(clcipdt)) # append patch RGB of cur img

			# ii) spot area value
			clcidt = []
			for lb in range(1, nlb + 1):
				ciclbsdt = spotGpPeak(img, para, label[id], lb)
				clcipsdt.append(ciclbsdt)  # append RGB of spot of cur label
			cldt.append(np.array(clcipsdt))	   # add
			# II) handled image data added
		dt.append(np.array(cldt))
	return np.array(dt)

# dt[0] - Under light1
# dt[0][0] - 1st img
# dt[0][0][0] - patch RGB
# dt[0][0][1-3] - spot RGB from 3 labels

# test refer to Apr 1

// wrout data
def wroutImgWise(dt, op):
	nlght, nimg, nlb, nch = dt.shape
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, nlght):                # light i
			for j in range(0, nimg):         # img j
				for k in range(0, nlb):  # patch or lb\th block
					b = writer.writerow(dt[i][j][k])
# test refer to Apr 1


**** Data output_light-wise ****
// (I) collect all image and wrout representative val only for each light
def spotMask(img, para, label, curlb):
	rw, cl, hoffset, voffset, hdist, vdist, hdd, vdd, r, dr = para
	cimg = np.copy(img)
	# mask blocks whose spot not in current color group (curlb)
	for i in range(0, rw):
		for j in range(0, cl):
			id = i * cl + j
			x = hoffset + j*hdist + (2*j+1)*r # col no.
			y = voffset + i*vdist + (2*i+1)*r # row no.
			if (label[id] != curlb):
				cimg[y-vdd: y+vdd, x-hdd: x+hdd] = 0
	return cimg

def collectLightWise(ip, label, nimg, nlb):
	lwp = []	# all patch image under light each light
	lws = []
	dt = []		# white/spot area RGB for all imgs under cur light
	for light in os.listdir(ip):  # light conditions
		clhistpdt = []	      # all imgs under cur light, collect for hist plotting
		clhistsdt = []        # label-wise histogram data for spot
		for i in range(0, nlb):
			clhistsdt.append([])
		imgct = -1	      # cur img id
		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):  # imgs under current light
			imgct = imgct + 1	 # increment cur img id
			img = cv2.imread(os.path.join(curin, imgnm))
			x, y, z = img.shape
			if ((x,y,z) == (1,1,3)):
				continue

			# i) white area assemble
			clhistpdt.append(img)
			# ii) spot area assemble
			for lb in range(0, nlb):
				mimg = spotMask(img, para, label[imgct], lb + 1)
				clhistsdt[lb].append(mimg)

		lwp.append(np.array(clhistpdt)) # test
		lws.append(np.array(clhistsdt))
		# clhistsdt equals lwp[ltct]
		# clhistpdt equals lws[ltct]

		cldt = []
		# calculate peak value
		# I) for patch
		clpdt = []
		cnimg = len(clhistpdt)
		nrow, ncol, nch = clhistpdt[0].shape
		histpdt = np.reshape(np.array(clhistpdt), (cnimg*nrow*ncol, nch))
		for ch in range(0, 3):
			hist, pc, sc = histogram(histpdt, 1, ch, 0, 0, '', 1, 0, 1) # peak
			clpdt.append(pc)
		cldt.append(np.array(clpdt))

		# II) for spot
		for lb in range(0, nlb):
			cclhistsdt = clhistsdt[lb]
			lbdt = []
			cnimg = len(cclhistsdt)
			histsdt = np.reshape(np.array(cclhistsdt), (cnimg*nrow*ncol, nch))
			histsdt = histsdt[(histsdt != 0).all(axis = (1))]
			for ch in range(0, 3):
				hist, pc, sc = histogram(histsdt, 1, ch, 0, 0, '', 1, 0, 1) # peak
				lbdt.append(sc)
			cldt.append(np.array(lbdt))
		dt.append(np.array(cldt))	
	return np.array(dt), lwp, lws

# dt[0] - Under light1
# dt[0][0] - patch RGB of all imgs
# dt[0][1-3] - spot RGB from 3 labels

# lwp[0] - Under light1
# lwp[0][0] - 1st img

# lws[0][0] - label 1
# lws[0][0][0] - 1st img
# test refer to Apr 1
def wroutImgWise(dt, op):
	nlght, nlb, nch = dt.shape
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, nlght):       # light i
			for k in range(0, nlb): # patch or lb\th block
				b = writer.writerow(dt[i][k])

// (II) Apr 4, export all data instead of repre value
# (i) collect
# v2/3 only collect
# v3 add simpleCover to get patch internally, refer to bm_v5

# (ii) generate lw histogram and store
# output into individual folder together with image-wise hist
def lwHist(imgCol, op):
	channel = ['R','G','B']
	opnm = ['R.png', 'G.png', 'B.png']
	ltid = -1
	histCol = []
	for light in os.listdir(op):
		curltHist = []
		ltid = ltid + 1
		curout = os.path.join(op, light)
		for ch in range(0, 3):
			cc = os.path.join(curout, channel[ch])
			outname = os.path.join(cc, opnm[ch])
			nimg, x, y, z = imgCol[ltid].shape
			dt = np.reshape(imgCol[ltid], (nimg*x*y, z))
			hist = histogram(dt, 1, ch, 0, 1, outname, 0, 1, 0)
			curltHist.append(hist)
		histCol.append(np.array(curltHist))
	return np.array(histCol)

# output collectively to one folder
def lwHist(imgCol, op):
	channel = ['R','G','B']
	prefix = ['light1_', 'light2_', 'light3_']
	suffix = ['R.png', 'G.png', 'B.png']
	histCol = []
	for light in range(0, 3):
		curltHist = []
		nimg, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		for ch in range(0, 3):
			outname = os.path.join(op, prefix[light] + suffix[ch])
			hist = histogram(dt, 1, ch, 0, 1, outname, 0, 1, 0)
			curltHist.append(hist)
		histCol.append(np.array(curltHist))
	return np.array(histCol)

def dissect(ip, op):
	for light in os.listdir(ip):
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)
			img = cv2.imread(inname)
			if (img.shape == (1,1,3)):
				cv2.imwrite(outname, img)
				continue
			patch = simpleCover(img, para, 21)
			cv2.imwrite(outname, patch)

def simpleHist(ip, op):
	for light in os.listdir(ip):
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		channel = ['R', 'G', 'B']
		for ch in range(0, 3):
			curc = os.path.join(curout, channel[ch])
			for imgnm in os.listdir(curin):
				inname = os.path.join(curin, imgnm)
				outname = os.path.join(curc, imgnm)
				outname = outname[0 : len(outname) - 4]
				outname = outname + '.png'
				img = cv2.imread(inname)
				if (img.shape == (1,1,3)):
					cv2.imwrite(outname, img)
					continue
				hist = histogram(img, 0, ch, 0, 1, outname, 0, 1, 0)

# (iii) export lw data instead of repre value only
# Apr 4, v1
# export all data for lightwise collected image, extremely large !!!!
def export(imgCol, op):
	nm = ['light1.csv', 'light2.csv', 'light3.csv']
	for light in range(0, 3):
		outname = os.path.join(op, nm[light])
		nimg, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		m, n = dt.shape
		with open(outname, 'w', newline = '') as f:
			writer = csv.writer(f, delimiter = ',')
			for i in range(0, m):
				b = writer.writerow(dt[i])

# Apr, v2
# brifely cleaned up, extract only data around peak, fail to perform ANOVA
// boundary peak region
def thre(hist):
	mx = max(hist)
	p = 0
	for i in range(0, 255):
		if (hist[i] == mx):
			p = i
			break
	return p-1, p, p+1

// output data
def export(histCol, imgCol, op):
	nm = ['light1.csv', 'light2.csv', 'light3.csv']
	for light in range(0, 3):
		outname = os.path.join(op, nm[light])
		bd = [[],[],[]]
		for ch in range(0, 3):
			lo, p, hi = thre(histCol[light][ch])
			bd[ch] = np.array([lo, hi])

		nimg, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		for i in range(0, 3):
			lo = bd[i][0]
			hi = bd[i][1]
			dt = dt[np.where(np.logical_and(dt[:,i] >= lo, dt[:,i] <= hi))]

		m, n = dt.shape
		hist = histogram(dt, 1, 0, 0, 0, '', 1, 1, 0)
		with open(outname, 'w', newline = '') as f:
			writer = csv.writer(f, delimiter = ',')
			for i in range(0, m):
				b = writer.writerow(dt[i])
