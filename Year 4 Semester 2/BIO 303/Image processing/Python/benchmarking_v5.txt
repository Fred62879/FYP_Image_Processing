# Apr 2 2019 update
# Folder name changed
# ..._n -> ..._c (stores cropped chip)
# ..._wp -> ..._nwp1 (stores normalized chip using wp1) (same applies to other algr)

# designed for version 2 benchmarking
# Images under this directory are all sotred in the way that
# those of the same light (6 chips * 2 time points)
# are placed in one folder (e.g. light1/2/3)

os.chdir('wd/2018-19FYP/chip_v2/Benchmarking/20190305/version2')

**** Process ****
# v1 arrangement_for distance calculation
# v2 rearrangement_for other two measures
def crop(ip, op):
	error = []
	for folder in os.listdir(ip): # either chipid (v1) or light (v2)
		curin = os.path.join(ip, folder)
		curout = os.path.join(op, folder)
		for imgnm in os.listdir(curin):
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)
			try:
				orig, gray, inner, chip, warp, restr = process(inname, 100, .02, .01)
			except:
				error.append(inname)
				cv2.imwrite(outname, np.zeros(shape = (1, 1)))
				continue
			cv2.imwrite(outname, restr)
	return error

error = crop('20190305_lightconditions', '20190305_lightconditions_c') # both v2 crop

**** Distance ****
def collect(curDir, curt1, curt2, nl):
	count = 0
	for filename in os.listdir(curDir):
		img = cv2.imread(os.path.join(curDir, filename))
		if ((count < nl) & (img is not None) & (img.shape != (1,1,3))):
			curt1.append(img)
		elif ((count >= nl) & (img is not None) & (img.shape != (1,1,3))):
			curt2.append(img)
		count = count + 1

def cal(curt, curDist, allDist):
	if (len(curt) <= 1):
		return
	for i in range(1, len(curt)):
		curDist.append(np.sum((curt[i]-curt[0])**2))
	allDist.append(curDist)

def distanceAll(root, nl):
	allDist = []
	curt1 = []
	curt2 = []
	for dirs in os.listdir(root):
		del curt1[:]
		del curt2[:]
		collect(os.path.join(root, dirs), curt1, curt2, nl)		
		cal(curt1, [], allDist)
		cal(curt2, [], allDist)
	return allDist


**** Normalize & Data output_block-wise ****
def normCollect(ip, op, para, choa, thre, stadrd, shape):
	pdt = []	# patch RGB for imgs under all lights using choa\th algr
	sdt = []	# spot...
	for light in os.listdir(ip):  # light conditions
		clpdt = []	      # patch RGB for all imgs under cur_light...
		clsdt = []	      # spot...
		curin = os.path.join(ip, light)
		curout = os.path.join(op, light)
		for imgnm in os.listdir(curin): # imgs under current light
			inname = os.path.join(curin, imgnm)
			outname = os.path.join(curout, imgnm)

			img = cv2.imread(inname)
			if (img.shape == (1,1,3)):
				cv2.imwrite(outname, img)
				clpdt.append(np.full(shape, -1))
				clsdt.append(np.full(shape, -1))
				continue
			norm, clcipdt, clcisdt = lightAdjust(img, para, choa, thre, stadrd) # v5
			cv2.imwrite(outname, norm)
			
			# collect RGB value
			clpdt.append(clcipdt) # append RGB of all patches of cur img
			clsdt.append(clcisdt)
		pdt.append(np.array(clpdt))
		sdt.append(np.array(clsdt))
	return np.array(pdt), np.array(sdt)

def wroutPS(dt, op):
	nlght, nimg, nbk, nch = dt.shape
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, nlght):                # light i
			for j in range(0, nimg):         # img j
				for k in range(0, nbk): # block k
					b = writer.writerow(dt[i][j][k])
def wrout(p, s, algr, nm, op):
	wroutPS(p, op + algr + nm[0])
	wroutPS(s, op + algr + nm[1])


**** Data output_img-wise ****
def spotGpPeak(img, para, label, curlb):
	rw, cl, hoffset, voffset, hdist, vdist, hdd, vdd, r, dr = para
	cimg = np.copy(img)
	# mask blocks whose spot not in current color group (curlb)
	for i in range(0, rw):
		for j in range(0, cl):
			id = i * cl + j
			x = hoffset + j*hdist + (2*j+1)*r # col no.
			y = voffset + i*vdist + (2*i+1)*r # row no.
			if (label[id] != curlb):
				cimg[y-vdd: y+vdd, x-hdd: x+hdd] = 0
	# show(cimg, 1)
	x, y, z = cimg.shape
	dt = np.reshape(cimg, (x*y, z))
	# remove pixels if being 0 in any channel
	dt = dt[(dt != 0).all(axis = (1))]
	cisdt = []
	cihist = []
	for ch in range(0, 3):
		hist, pc, sc = histogram(dt, 1, ch, 0, 0, '', 1, 0, 1) # peak
		cisdt.append(sc)
		cihist.append(hist)
	# return dt, np.array(cisdt), np.array(cihist)
	return np.array(cisdt)

# each img has 1+nlb RGB, one for patch, the others for spots of nlb# labels
def collectImgWise(ip, label, nimg, nlb):
	dt = []		# white/spot area RGB for imgs under all lights using choa\th algr
	for light in os.listdir(ip):  # light conditions
		cldt = []	      # white/spot area RGB for all imgs under cur_light...
		imgct = -1	      # cur img id
		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):  # imgs under current light
			imgct = imgct + 1	 # increment cur img id
			img = cv2.imread(os.path.join(curin, imgnm))
			x, y, z = img.shape

			# I) unhandled img
			clcipsdt = []
			if ((x,y,z) == (1,1,3)):
				for i in range(0, 1 + nlb): # one patch and nlb# labels
					clcipsdt.append(np.array([-1, -1, -1]))
				cldt.append(np.array(clcipsdt))
				continue

			# II) handled image
			# i) white area value
			clcipsdt = [] # patch & spot RGB value of cur img
			clcipdt = []  # collect individually R/G/B of cur patch
			histdt = np.reshape(img, (x*y, z))
			for ch in range(0, 3): # R/G/B channel
				hist, bins = np.histogram(histdt[:, ch], 256, [0, 256])
				mx = max(hist)
				intenw = 0
				for i in range(0, 255):
					if (hist[i] == mx):
						intenw = i
				clcipdt.append(intenw)
			clcipsdt.append(np.array(clcipdt)) # append patch RGB of cur img

			# ii) spot area value
			clcidt = []
			for lb in range(1, nlb + 1):
				ciclbsdt = spotGpPeak(img, para, label[imgct], lb)
				clcipsdt.append(ciclbsdt)  # append RGB of spot of cur label
			cldt.append(np.array(clcipsdt))	   # add
			# II) handled image data added
		dt.append(np.array(cldt))
	return np.array(dt)

def wroutImgWise(dt, op):
	nlght, nimg, nlb, nch = dt.shape
	with open(op, 'w', newline = '') as f:
		writer = csv.writer(f, delimiter = ',')
		for i in range(0, nlght):                # light i
			for j in range(0, nimg):         # img j
				for k in range(0, nlb):  # patch or lb\th block
					b = writer.writerow(dt[i][j][k])


**** Data output_light-wise ****
// Apr 4
# (I) collect patch/spot lw
def spotMask(img, para, label, curlb):
	rw, cl, hoffset, voffset, hdist, vdist, hdd, vdd, r, dr = para
	cimg = np.copy(img)
	# mask blocks whose spot not in current color group (curlb)
	for i in range(0, rw):
		for j in range(0, cl):
			id = i * cl + j
			x = hoffset + j*hdist + (2*j+1)*r # col no.
			y = voffset + i*vdist + (2*i+1)*r # row no.
			if (label[id] != curlb):
				cimg[y-vdd: y+vdd, x-hdd: x+hdd] = 0
	return cimg

def maskInvAdd(mask, img):
		mask_inv = cv2.bitwise_not(mask)
		img_inv = cv2.bitwise_not(img)
		merge_inv = cv2.add(mask_inv, img_inv)
		merge = cv2.bitwise_not(merge_inv)
		return merge

def simpleCover(img, para, dr):
	rw, cl, rst, cst, hd, vd, hdd, vdd, r, x = para
	mask = np.zeros_like(img)
	for i in range(0, rw):          # spot in row i
		for j in range(0, cl):  #         col j
			cr = cst + i*vd + (2*i+1)*r
			cc = rst + j*hd + (2*j+1)*r
			mask_inv = cv2.circle(mask, (cc, cr), dr, (255, 255, 255), -1)
	mask = cv2.bitwise_not(mask_inv)
	patch = maskInvAdd(mask, img)      # spot areas are black
	# show(patch, 1)
	return patch

def collectLightWise(ip, label, nimg, nlb):
	lwp = [] # lightwise collection of patch images
	lws = [] # lw col of spot images based on labels
	lwa = [] # lw col of intact images
	for light in os.listdir(ip):  # light conditions
		clp = []
		cls = []
		cla = []
		for i in range(0, nlb):
			cls.append([])
		imgct = -1	      # cur img id
		curin = os.path.join(ip, light)
		for imgnm in os.listdir(curin):  # imgs under current light
			imgct = imgct + 1	 # increment cur img id
			img = cv2.imread(os.path.join(curin, imgnm))
			x, y, z = img.shape
			if ((x,y,z) == (1,1,3)):
				continue

			cla.append(img)
			# i) white area assemble
			patch = simpleCover(img, para, 21) # refer to ** Dissect ** below
			clp.append(patch)
			# ii) spot area assemble
			for lb in range(0, nlb):
				mimg = spotMask(img, para, label[imgct], lb + 1)
				cls[lb].append(mimg)
		lwp.append(np.array(clp))
		lws.append(np.array(cls))
		lwa.append(np.array(cla))
	return lwp, lws, lwa

# (II) plot histogram lw and store
def lwHist(imgCol, op):
	prefix = ['light1_', 'light2_', 'light3_']
	suffix = ['R.png', 'G.png', 'B.png']
	histCol = []
	for light in range(0, 3):
		curltHist = []
		nimg, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		for ch in range(0, 3):
			outname = os.path.join(op, prefix[light] + suffix[ch])
			hist = histogram(dt, 1, ch, 0, 1, outname, 0, 1, 0)
			curltHist.append(hist)
		histCol.append(np.array(curltHist))
	return np.array(histCol)

# (III) output Madeup data_Apr 5
def dataMakeupIndivd(hist, thre):
	mx = max(hist)
	p = 0
	lo = []   # count(/10000) from p leftward until less than thre
	hi = []   # ... right...
	for i in range(0, 255):
		if (hist[i] == mx):
			p = i
			break
	for i in range(p - 1, 0, -1):
		if (hist[i] >= thre):
			lo.append(math.ceil(hist[i] / 10000))
		else:
			break
	for i in range(p + 1, 255):
		if (hist[i] >= thre):
			hi.append(math.ceil(hist[i] / 10000))
		else:
			break
	res = [p] * (math.ceil(mx / 10000))
	for i in range(0, len(lo)):
		for j in range(0, lo[i]):
			res.append(p - i - 1)
	for i in range(0, len(hi)):
		for j in range(0, hi[i]):
			res.append(p + i + 1)
	# return p, lo, hi, np.array(res)
	return np.array(res)

# res[0] - R channel
# res[0][0] - light 1 data

def dataMakeUp(imgCol, thre):
	res = [[],[],[]]
	length = [[],[],[]]
	for light in range(0, 3):
		nimg, x, y, z = imgCol[light].shape
		dt = np.reshape(imgCol[light], (nimg*x*y, z))
		dt = dt[(dt != 0).all(axis = (1))]
		for ch in range(0, 3):
			orighist = histogram(dt, 1, 0, ch, 0, 0, '', 0, 0, 1, 0)
			newdt = dataMakeupIndivd(orighist, thre)
			newhist = histogram(newdt, 1, 1, 0, 0, 0, '', 0, 0, 1, 0)
			res[ch].append(newdt)
			length[ch].append(len(newdt))
	return res, length


def export(imgCol, op, thre):
	dt, sz = dataMakeUp(imgCol, thre)
	nm = ['R.csv', 'G.csv', 'B.csv']
	for ch in range(0, 3):
		ssz = str(sz[ch][0]) + '_' + str(sz[ch][1]) + '_' + str(sz[ch][2])
		outname = os.path.join(op, ssz + '_' + nm[ch])
		with open(outname, 'w', newline = '') as f:
			writer = csv.writer(f, delimiter = ',')
			for light in range(0, 3):
				for id in range(0, sz[ch][light]):
					out = dt[ch][light][id]
					b = writer.writerow([out])
