# enhance chip image and normalize - generated on Dec 12-13
# para: warp - warped chip image
#	spot/sur_dt - list of values for spot and panel area in each block of the chip
#	nbins - # of bins to calculate 3D histogram
# 	rw * cl chip
# 	rst - horizontal distance between leftmost point of spot at top-left corner
#	      and the blackborder of left edge
# 	cst - vertical distance between topmost ... top edge
# 	hd - horizontal distance between two spots
# 	vd - vertical ...
#	hdd - half of horizontal edge length of rectangle extracted
#	vdd - ... vertical
# 	r - radius of spot	
#
# output: 
#

def normalize(warp, spotdt, surdt, nbins, rw, cl, rst, cst, hd, vd, hdd, vdd, r):

	# fill individual block of the chip with given value
	# para: norm - blank image, fill blocks constitutively
	#	i/j - row/column id of current block
	#	r/g/b - vals used to fill block
	#	REST - SAME
	#
	# output: norm - current blocked filled
	#
	def fill(norm, i, j, R, G, B, rst, cst, hd, vd, hdd, vdd, r):
		x = rst + j*hd + (2*j+1)*r
		y = cst + i*vd + (2*i+1)*r
		norm[y - vdd: y + vdd, x - hdd: x + hdd] = [R,G,B]
		return norm

	# enhance the panel
	# para: surdt - data for areas excluding spot (panel)
	#	norm - enhanced panel image
	#	REST - SAME
	#
	# output: norm - image for panel, each block consists of pixels of the same value
	#		 calculated as the most representative value of that block
	#
	def panelConstruct(surtdt, norm, nbins, rw, cl, rst, cst, hd, vd, hdd, vdd, r):
		for i in range(0, rw):
			for j in range(0, cl):
				id = i * cl + j
				R, G, B = repreVal(surdt, nbins, id)
				norm = fill(norm, i, j, R, G, B, rst, cst, hd, vd, hdd, vdd, r)
				#show(norm, 1)
				#if cv2.waitKey(0) & 0xFF == ord('a'):
				#	return
		return norm

	# black-out areas other than spots - updated on Dec 22
	# para: mask - blank image same size as warped, drawing panel
	#	fold - edge length of warped / 420
	#	same as for that for whole function
	# output: mask - blank image where spot areas being white
	#
	def maskD(mask, fold, rsz, rw, cl, rst, cst, hd, vd, r, dr):
		d = fold*r
		for i in range(0, rw):
			for j in range(0, cl):
				x = rst + j*hd + (2*j+1)*d
				y = cst + i*vd + (2*i+1)*d
				cv2.circle(mask, (x, y), dr, (255, 255, 255), -1)
		show(mask, rsz)
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return
		return mask
		
	# enhance chip through adding enhanced spots to enhanced panel
	# para: warp - warped chip image
	#	REST SAME
	#
	# output: 
	#	
	def enhanceGraph(warp, spotdt, surdt, nbins, rw, cl, rst, cst, hd, vd, hdd, vdd, r, dr):
		# draw enhanced panel
		enh = np.zeros_like(warp)      # empty panel
		enh = panelConstruct(surdt, enh, nbins, rw, cl, rst, cst, hd, vd, hdd, vdd, r)
		show(enh, 1)		       # draw sub-panel using normalized mode value
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return

		# black-out spot areas on enh
		mask = np.zeros_like(warp)
		mask = maskD(mask, 1, 1, rw, cl, rst, cst, hd, vd, r, r)
		enh_inv = cv2.bitwise_not(enh)
		enh2_inv = cv2.add(enh_inv, mask)
		enh2 = cv2.bitwise_not(enh2_inv)
		show(enh2, 1)			# enh where spots areas are black
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return

		# add spots
		for i in range(0, rw):
			for j in range(0, cl):
				id = i * cl + j
				R,G,B = repreVal(spotdt, nbins, id)
				x = rst + j*hd + (2*j+1)*r
				y = cst + i*vd + (2*i+1)*r
				cv2.circle(enh2, (x, y), r, [R,G,B], -1)
		show(enh2, 1)
		if cv2.waitKey(0) & 0xFF == ord('a'):
			return

		return enh2

	#
	# para:
	#
	# output:
	#
	def normalize(warp):
		norm = np.empty(warp.shape)
		
		norm.fill(
		norm = [


	enhance = enhanceGraph(warp, spotdt, surdt, nbins, rw, cl, rst, cst, cext, lr, sr)






	