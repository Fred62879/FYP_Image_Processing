# extract values of spots & panels (areas excluding spots of the chip)
# para: warpHSV - perspectively transformed chip in HSV space
#	warp - perspectively transformed chip in RGB space
# 	fold - sample image display fold
# 	rw * cl chip (7 * 6 for 2nd version AmBit)
# 	rst - horizontal distance between leftmost point of spot at top-left corner
#	      and the blackborder of left edge
# 	cst - vertical distance between topmost ... top edge
# 	hd - horizontal distance between two spots
# 	vd - vertical ...
# 	r - radius of spot
#	dr - radius to draw the spot for mask. dr >= r to compensate for any deviation 
#	     of real spot location from calculated location, and variations in shape and size)
#	hdd - half of horizontal edge length of rectangle extracted
#	vdd - ... vertical
#	th - $$$$TEMPORARY$$$$, threshold for precise spot detection
#	adj - if adj == 1, do adjustment
#	      else only return calculated shape
#
# output: spotDt - list of rw*cl sublists each containing values of corresponding spot
#	  surDt - list of rw*cl sublists each ... panel areas surrounding corresponding spot
#

def intenExtract(warpHSV, warp, fold, rw, cl, rst, cst, hd, vd, hdd, vdd, r, dr, th, adj):

	# display resized image
	def show(img, fold):
		rsz = cv2.resize(img, None, fx = fold, fy = fold)
		cv2.imshow('img',rsz)


	# restore image from data list
	# para: dt - list of data
	# output: restored image
	#
	def draw(dt, rw, cl):
		for i in range(0, rw):
			b = np.array(dt[i*cl])
			for j in range(1, cl):
				b = np.hstack((b, np.array(dt[i*cl + j])))
			if (i == 0):
				a = b
			else:
				a = np.vstack((a, b))
		return a

	# exclude 0 from collected data
	# para: dt - list of data for either 42 spots or sur blocks
	# output: list of data excluding zero
	#
	def noZero(dt):
		res = []
		for i in range(0, len(dt)): # for each spot/sur
			cur = dt[i]
			cur = cur[(cur != 0).any(axis = (2))]
			res.append(cur)
		return res

	# extract intensity values from target area
	# para: SAME
	#
	# output:
	#
	# NOTE: image slicing automically cease if exceed image size, e.g. a[412:450,412:450]
	# 	gives only a 8x8 slice
	def inten(merge, rw, cl, rst, cst, hd, vd, r, hdd, vdd):
		res = []
		for i in range(0, rw):
			for j in range(0, cl):
				x = rst + j*hd + (2*j+1)*r
				y = cst + i*vd + (2*i+1)*r
				a = y + vdd
				#if (y + vdd >= merge.shape[0]):
				#	a = merge.shape[0]
				res.append(merge[y - vdd: a, x - hdd: x + hdd])
		return res

	# spot shape and size adjustment
	spot, sur = spotEx(warpHSV, warp, fold, rw, cl, rst, cst, hd, vd, r, dr, th, adj)

	# process spots to extract value of each pixels in each spot
	spotDt = inten(spot, rw, cl, rst, cst, hd, vd, r, hdd, vdd) # list of spot value
	show(draw(spotDt, rw, cl), 1)  # correctness check: draw image from data
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	spotDt = noZero(spotDt)        # exclude 0 values in the data list

	# same operation on panel area
	surDt = inten(sur, rw, cl, rst, cst, hd, vd, r, hdd, vdd)
	show(draw(surDt, rw, cl), 1)
	if cv2.waitKey(0) & 0xFF == ord('a'):
		return
	surDt = noZero(surDt)

	return spot, sur, spotDt, surDt